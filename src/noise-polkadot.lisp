(in-package :umbra.noise)

;;;; Noise functions
;;;; Polka-dot noise

(defun-gpu polkadot ((p :vec2)
                     (radius-low :float)
                     (radius-high :float)
                     (hash-fn (function (:vec2) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.z hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec2 radius))
    (decf pf (vec2 (1- radius)))
    (incf pf (* (.xy hash) (- radius 2)))
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot ((p :vec2)
                     (radius-low :float)
                     (radius-high :float))
  (polkadot p radius-low radius-high (lambda ((x :vec2)) (umbra.hashing:fast32/cell x))))

(defun-gpu polkadot/simplex ((p :vec2)
                             (radius :float)
                             (max-dimness :float)
                             (hash-fn (function (:vec2) :vec4)))
  (let* ((simplex-points (vec3 (- 1 +simplex-2d/unskew-factor+)
                               (- +simplex-2d/unskew-factor+)
                               (- 1 (* +simplex-2d/unskew-factor+ 2))))
         (p (* p +simplex-2d/triangle-height+))
         (pi (floor (+ p (dot p (vec2 +simplex-2d/skew-factor+)))))
         (v0 (- pi (dot pi (vec2 +simplex-2d/unskew-factor+)) p))
         (hash (funcall hash-fn pi))
         (radius (/ +simplex-2d/inverse-triangle-half-edge-length+ radius))
         (v0123-x (* (+ (vec4 0 (.xyz simplex-points)) (.x v0)) radius))
         (v0123-y (* (+ (vec4 0 (.yxz simplex-points)) (.y v0)) radius))
         (point-distance (max (vec4 0) (- 1 (+ (* v0123-x v0123-x) (* v0123-y v0123-y))))))
    (dot (- 1 (* hash max-dimness)) (expt point-distance (vec4 3)))))

(defun-gpu polkadot/simplex ((p :vec2)
                             (radius :float)
                             (max-dimness :float))
  (polkadot/simplex p radius max-dimness (lambda ((x :vec2)) (umbra.hashing:fast32 x))))

(defun-gpu polkadot/box ((p :vec2)
                         (radius-low :float)
                         (radius-high :float)
                         (hash-fn (function (:vec2) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.z hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec2 radius))
    (decf pf (vec2 (1- radius)))
    (incf pf (* (.xy hash) (- radius 2)))
    (multf pf pf)
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot/box ((p :vec2)
                         (radius-low :float)
                         (radius-high :float))
  (polkadot/box p radius-low radius-high (lambda ((x :vec2)) (umbra.hashing:fast32/cell x))))

(defun-gpu polkadot ((p :vec3)
                     (radius-low :float)
                     (radius-high :float)
                     (hash-fn (function (:vec3) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.w hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec3 radius))
    (decf pf (vec3 (1- radius)))
    (incf pf (* (.xyz hash) (- radius 2)))
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot ((p :vec3)
                     (radius-low :float)
                     (radius-high :float))
  (polkadot p radius-low radius-high (lambda ((x :vec3)) (umbra.hashing:fast32/cell x))))

(defun-gpu polkadot/box ((p :vec3)
                         (radius-low :float)
                         (radius-high :float)
                         (hash-fn (function (:vec3) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.w hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec3 radius))
    (decf pf (vec3 (1- radius)))
    (incf pf (* (.xyz hash) (- radius 2)))
    (multf pf pf)
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot/box ((p :vec3)
                         (radius-low :float)
                         (radius-high :float))
  (polkadot/box p radius-low radius-high (lambda ((x :vec3)) (umbra.hashing:fast32/cell x))))
