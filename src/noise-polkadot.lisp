(in-package :umbra.noise)

;;;; Noise functions
;;;; Polka-dot noise

(defun-gpu polkadot ((p :vec2)
                     (radius-low :float)
                     (radius-high :float)
                     (hash-fn (function (:vec2) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.z hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec2 radius))
    (decf pf (vec2 (1- radius)))
    (incf pf (* (.xy hash) (- radius 2)))
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot ((p :vec2)
                     (radius-low :float)
                     (radius-high :float))
  (polkadot p radius-low radius-high (lambda ((x :vec2)) (umbra.hashing:fast32/cell x))))

(defun-gpu polkadot/box ((p :vec2)
                         (radius-low :float)
                         (radius-high :float)
                         (hash-fn (function (:vec2) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.z hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec2 radius))
    (decf pf (vec2 (1- radius)))
    (incf pf (* (.xy hash) (- radius 2)))
    (multf pf pf)
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot/box ((p :vec2)
                         (radius-low :float)
                         (radius-high :float))
  (polkadot/box p radius-low radius-high (lambda ((x :vec2)) (umbra.hashing:fast32/cell x))))

(defun-gpu polkadot ((p :vec3)
                     (radius-low :float)
                     (radius-high :float)
                     (hash-fn (function (:vec3) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.w hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec3 radius))
    (decf pf (vec3 (1- radius)))
    (incf pf (* (.xyz hash) (- radius 2)))
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot ((p :vec3)
                     (radius-low :float)
                     (radius-high :float))
  (polkadot p radius-low radius-high (lambda ((x :vec3)) (umbra.hashing:fast32/cell x))))

(defun-gpu polkadot/box ((p :vec3)
                         (radius-low :float)
                         (radius-high :float)
                         (hash-fn (function (:vec3) :vec4)))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (funcall hash-fn pi))
         (radius (max 0 (+ radius-low (* (.w hash) (- radius-high radius-low)))))
         (value (/ radius (max radius-high radius-low))))
    (setf radius (/ 2 radius))
    (multf pf (vec3 radius))
    (decf pf (vec3 (1- radius)))
    (incf pf (* (.xyz hash) (- radius 2)))
    (multf pf pf)
    (* (umbra.shaping:falloff-squared-c2 (min (dot pf pf) 1.0)) value)))

(defun-gpu polkadot/box ((p :vec3)
                         (radius-low :float)
                         (radius-high :float))
  (polkadot/box p radius-low radius-high (lambda ((x :vec3)) (umbra.hashing:fast32/cell x))))
