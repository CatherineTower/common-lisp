(in-package :gamebox-math)

;;; Structure

(deftype dquat () '(simple-array quat (2)))

(defstruct (dquat (:type vector)
                  (:constructor dquat (real dual))
                  (:conc-name dq-)
                  (:copier nil))
  (real (qzero) :type quat)
  (dual (qzero) :type quat))

(defmacro with-dquat (binds &body body)
  (if (null binds)
      `(progn ,@body)
      (let ((prefix (caar binds))
            (dquat (cadar binds)))
        `(with-quat ((,prefix ,dquat)
                     (,(make-accessor-symbol prefix '.r) (dq-real ,dquat))
                     (,(make-accessor-symbol prefix '.d) (dq-dual ,dquat)))
           ,(cadar binds)
           (with-dquat ,(cdr binds) ,@body)))))

;;; Operations

(declaim (inline dqid!))
(defun* (dqid! -> dquat) ((dquat dquat))
  (with-dquat ((d dquat))
    (qid! d.r)
    (psetf d.d.w 0.0f0 d.d.x 0.0f0 d.d.y 0.0f0 d.d.z 0.0f0))
  dquat)

(declaim (inline dqid))
(defun* (dqid -> dquat) ()
  (dqid! (dquat (qid) (qzero))))

(declaim (inline dqzero!))
(defun* (dqzero! -> dquat) ((dquat dquat))
  (with-dquat ((d dquat))
    (qzero! d.r)
    (qzero! d.d))
  dquat)

(declaim (inline dqzero))
(defun* dqzero ()
  (dquat (qzero) (qzero)))

(declaim (inline dq=))
(defun* (dq= -> boolean) ((dquat-a dquat) (dquat-b dquat))
  (with-dquat ((d1 dquat-a) (d2 dquat-b))
    (and (q= d1.r d2.r)
         (q= d1.d d2.d))))

(declaim (inline dq~))
(defun* (dq~ -> boolean) ((dquat-a dquat) (dquat-b dquat)
                          &key
                          ((tolerance single-float) +epsilon+))
  (with-dquat ((d1 dquat-a) (d2 dquat-b))
    (and (q~ d1.r d2.r :tolerance tolerance)
         (q~ d1.d d2.d :tolerance tolerance))))

(declaim (inline dqcp!))
(defun* (dqcp! -> dquat) ((out-dquat dquat) (dquat dquat))
  (with-dquat ((o out-dquat) (d dquat))
    (qcp! o.r d.r)
    (qcp! o.d d.d))
  out-dquat)

(declaim (inline dqcp))
(defun* (dqcp -> dquat) ((dquat dquat))
  (dqcp! (dqid) dquat))

(declaim (inline dq+!))
(defun* (dq+! -> dquat) ((out-dquat dquat) (dquat-a dquat) (dquat-b dquat))
  (with-dquat ((o out-dquat) (d1 dquat-a) (d2 dquat-b))
    (q+! o.r d1.r d2.r)
    (q+! o.d d1.d d2.d))
  out-dquat)

(declaim (inline dq+))
(defun* (dq+ -> dquat) ((dquat-a dquat) (dquat-b dquat))
  (dq+! (dqid) dquat-a dquat-b))

(declaim (inline dq-!))
(defun* (dq-! -> dquat) ((out-dquat dquat) (dquat-a dquat) (dquat-b dquat))
  (with-dquat ((o1 out-dquat) (d1 dquat-a) (d2 dquat-b))
    (q-! o1.r d1.r d2.r)
    (q-! o1.d d1.d d2.d))
  out-dquat)

(declaim (inline dq-))
(defun* (dq- -> dquat) ((dquat-a dquat) (dquat-b dquat))
  (dq-! (dqid) dquat-a dquat-b))

(defun* (dq*! -> dquat) ((out-dquat dquat) (dquat-a dquat) (dquat-b dquat))
  (let ((dual1 (qzero))
        (dual2 (qzero)))
    (with-dquat ((o out-dquat) (d1 dquat-a) (d2 dquat-b))
      (q*! o.r d1.r d2.r)
      (q*! dual1 d1.r d2.d)
      (q*! dual2 d1.d d2.r)
      (q+! o.d dual1 dual2)))
  out-dquat)

(declaim (inline dq*))
(defun* (dq* -> dquat) ((dquat-a dquat) (dquat-b dquat))
  (dq*! (dqid) dquat-a dquat-b))

(declaim (inline dqscale!))
(defun* (dqscale! -> dquat) ((out-dquat dquat) (dquat dquat)
                             (scalar single-float))
  (with-dquat ((o out-dquat) (d dquat))
    (qscale! o.r d.r scalar)
    (qscale! o.d d.d scalar))
  out-dquat)

(declaim (inline dqscale))
(defun* (dqscale -> dquat) ((dquat dquat) (scalar single-float))
  (dqscale! (dqid) dquat scalar))

(declaim (inline dqconj!))
(defun* (dqconj! -> dquat) ((out-dquat dquat) (dquat dquat))
  (with-dquat ((o out-dquat) (d dquat))
    (qconj! o.r d.r)
    (qconj! o.d d.d))
  out-dquat)

(declaim (inline dqconj))
(defun* (dqconj -> dquat) ((dquat dquat))
  (dqconj! (dqid) dquat))

(declaim (inline dqconjf!))
(defun* (dqconjf! -> dquat) ((out-dquat dquat) (dquat dquat))
  (with-dquat ((o out-dquat) (d dquat))
    (qconj! o.r d.r)
    (psetf o.d.w (- d.d.w) o.d.x d.d.x o.d.y d.d.y o.d.z d.d.z))
  out-dquat)

(declaim (inline dqconjf))
(defun* (dqconjf -> dquat) ((dquat dquat))
  (dqconjf! (dqid) dquat))

(declaim (inline dqmagsq))
(defun* (dqmagsq -> single-float) ((dquat dquat))
  (with-dquat ((d dquat))
    (qmagsq d.r)))

(declaim (inline dqmag))
(defun* (dqmag -> single-float) ((dquat dquat))
  (sqrt (dqmagsq dquat)))

(declaim (inline dqneg!))
(defun* (dqneg! -> dquat) ((out-dquat dquat) (dquat dquat))
  (dqscale! out-dquat dquat -1.0f0))

(declaim (inline dqnormalize!))
(defun* (dqnormalize! -> dquat) ((out-dquat dquat) (dquat dquat))
  (let ((magnitude (dqmag dquat)))
    (unless (zerop magnitude)
      (dqscale! out-dquat dquat (/ magnitude))))
  out-dquat)

(declaim (inline dqnormalize))
(defun* (dqnormalize -> dquat) ((dquat dquat))
  (dqnormalize! (dqid) dquat))

(defun* (dqapply! -> dquat) ((out-dquat dquat) (dquat-a dquat) (dquat-b dquat))
  (let ((dquat-b (dqnormalize dquat-b)))
    (dq*! out-dquat
          (dq* dquat-b dquat-a)
          (dqconjf dquat-b))))

(declaim (inline dqapply))
(defun* (dqapply -> dquat) ((dquat-a dquat) (dquat-b dquat))
  (dqapply! (dqid) dquat-a dquat-b))

(declaim (inline dqneg))
(defun* (dqneg -> dquat) ((dquat dquat))
  (dqneg! (dqid) dquat))

(declaim (inline dqdot))
(defun* (dqdot -> single-float) ((dquat-a dquat) (dquat-b dquat))
  (with-dquat ((d1 dquat-a) (d2 dquat-b))
    (qdot d1.r d2.r)))

(defun* (dqinv! -> dquat) ((out-dquat dquat) (dquat dquat))
  (with-dquat ((o out-dquat) (d dquat))
    (qinv! o.r d.r)
    (qscale! o.d (q* o.r (q* d.d o.r)) -1.0f0))
  out-dquat)

(declaim (inline dqinv))
(defun* (dqinv -> dquat) ((dquat dquat))
  (dqinv! (dqid) dquat))

(declaim (inline dqtr->v3!))
(defun* (dqtr->v3! -> vec3) ((out-vec vec3) (dquat dquat))
  (let ((s (qzero))
        (c (qzero)))
    (with-vec3 ((o out-vec))
      (with-dquat ((d dquat))
        (qscale! s d.d 2.0f0)
        (qconj! c d.r)
        (with-quat ((q (q* s c)))
          (setf o.x q.x o.y q.y o.z q.z)))))
  out-vec)

(declaim (inline dqtr->v3))
(defun* (dqtr->v3 -> vec3) ((dquat dquat))
  (dqtr->v3! (v3zero) dquat))

(declaim (inline v3->dqtr!))
(defun* (v3->dqtr! -> dquat) ((out-dquat dquat) (vec vec3))
  (with-dquat ((o (dqid! out-dquat)))
    (v3->q! o.d vec)
    (qscale! o.d o.d 0.5f0))
  out-dquat)

(declaim (inline v3->dqtr))
(defun* (v3->dqtr -> dquat) ((vec vec3))
  (v3->dqtr! (dqzero) vec))

(declaim (inline dqtr!))
(defun* (dqtr! -> dquat) ((out-dquat dquat) (dquat dquat) (vec vec3))
  (dq*! out-dquat (v3->dqtr vec) dquat))

(declaim (inline dqtr))
(defun* (dqtr -> dquat) ((dquat dquat) (vec vec3))
  (dqtr! (dqid) dquat vec))

(declaim (inline dqrot->q!))
(defun* (dqrot->q! -> quat) ((out-quat quat) (dquat dquat))
  (with-dquat ((d dquat))
    (qcp! out-quat d.r))
  out-quat)

(declaim (inline dqrot->q))
(defun* (dqrot->q -> quat) ((dquat dquat))
  (dqrot->q! (qzero) dquat))

(declaim (inline q->dqrot!))
(defun* (q->dqrot! -> dquat) ((out-dquat dquat) (quat quat))
  (with-dquat ((o out-dquat))
    (qcp! o.r quat)
    (qzero! o.d))
  out-dquat)

(declaim (inline q->dqrot))
(defun* (q->dqrot -> dquat) ((quat quat))
  (q->dqrot! (dqid) quat))

(defun* (dqrot! -> dquat) ((out-dquat dquat) (dquat dquat) (vec vec3))
  (with-dquat ((o out-dquat) (d dquat))
    (qrot! o.r d.r vec))
  out-dquat)

(declaim (inline dqrot))
(defun* (dqrot -> dquat) ((dquat dquat) (vec vec3))
  (dqrot! (dqid) dquat vec))

(defun* (dq->m4! -> mat4) ((out-mat mat4) (dquat dquat))
  (with-mat4 ((o out-mat))
    (with-dquat ((d dquat))
      (with-vec3 ((v (dqtr->v3 dquat)))
        (q->m4! o d.r)
        (psetf o.03 v.x o.13 v.y o.23 v.z))))
  out-mat)

(declaim (inline dq->m4))
(defun* (dq->m4 -> mat4) ((dquat dquat))
  (dq->m4! (m4id) dquat))

(defun* (m4->dq! -> dquat) ((out-dquat dquat) (mat mat4))
  (let ((rot (q->dqrot (m4->q mat)))
        (tr (v3->dqtr (m4tr->v3 mat))))
    (dq*! out-dquat tr rot))
  out-dquat)

(declaim (inline m4->dq))
(defun* (m4->dq -> dquat) ((mat mat4))
  (m4->dq! (dqid) mat))

(defun* (dq->screw -> (values single-float single-float vec3 vec3))
    ((dquat dquat))
  (with-dquat ((d (dqnormalize dquat)))
    (let* ((angle (* 2 (acos (clamp d.r.w -1 1))))
           (dir (v3normalize (q->v3 d.r)))
           (tr (dqtr->v3 dquat))
           (pitch (v3dot tr dir))
           (moment (v3scale
                    (v3+ (v3cross tr dir)
                         (v3scale (v3- (v3scale tr (v3dot dir dir))
                                       (v3scale dir pitch))
                                  (/ (tan (/ angle 2)))))
                    0.5f0)))
      (values angle pitch dir moment))))

(defun* (screw->dq! -> dquat) ((out-dquat dquat) (angle single-float)
                               (pitch single-float) (direction vec3)
                               (moment vec3))
  (let* ((half-angle (* angle 0.5f0))
         (c (cos half-angle))
         (s (sin half-angle)))
    (with-vec3 ((r (v3scale direction s))
                (d (v3+ (v3scale moment s)
                        (v3scale direction (* pitch c 0.5f0)))))
      (setf (dq-real out-dquat) (quat c r.x r.y r.z)
            (dq-dual out-dquat) (quat (- (* pitch s 0.5f0)) d.x d.y d.z))))
  out-dquat)

(declaim (inline screw->dq))
(defun* (screw->dq -> dquat) ((angle single-float) (pitch single-float)
                              (direction vec3) (moment vec3))
  (screw->dq! (dqid) angle pitch direction moment))

(defun* (dqsclerp! -> dquat) ((out-dquat dquat) (dquat-a dquat) (dquat-b dquat)
                              (factor single-float))
  (let ((diff (dq* (dqinv dquat-a) dquat-b)))
    (multiple-value-bind (angle pitch direction moment) (dq->screw diff)
      (dq*! out-dquat dquat-a (screw->dq (* angle factor)
                                         (* pitch factor)
                                         direction
                                         moment))))
  out-dquat)

(declaim (inline dqsclerp))
(defun* (dqsclerp -> dquat) ((dquat-a dquat) (dquat-b dquat)
                             (factor single-float))
  (dqsclerp! (dqid) dquat-a dquat-b factor))

(defun* (dqnlerp! -> dquat) ((out-dquat dquat) (dquat-a dquat) (dquat-b dquat)
                             (factor single-float))
  (dq+! out-dquat dquat-a (dqscale (dq- dquat-b dquat-a) factor)))

(declaim (inline dqnlerp))
(defun* (dqnlerp -> dquat) ((dquat-a dquat) (dquat-b dquat)
                            (factor single-float))
  (dqnlerp! (dqid) dquat-a dquat-b factor))
