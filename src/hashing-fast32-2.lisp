(in-package :umbra.hashing)

;;;; Hashing functions
;;;; FAST32_2
;;;; Brian Sharpe
;;;; https://github.com/BrianSharpe/GPU-Noise-Lib/blob/master/gpu_noise_lib.glsl

(defun-gpu fast32-2 ((grid-cell :vec2))
  (let ((p (vec4 grid-cell (1+ grid-cell))))
    (setf p (+ (* (- p (* (floor (* p (/ 69.0))) 69.0))
                  (.xyxy (vec2 "2.009842" "1.372549")))
               (.xyxy (vec2 "403.839172" "377.242706"))))
    (multf p p)
    (fract (* (.xzxz p) (.yyww p) (/ "32745.708984")))))

(defun-gpu fast32-2 ((grid-cell :vec3))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let ((offset (vec3 "55.882355" "63.167774" "52.941177"))
        (scale (vec3 "0.235142" "0.205890" "0.216449"))
        (grid-cell-inc1 (* (step grid-cell (vec3 67.5)) (1+ grid-cell)))
        ((x :vec4)))
    (setf grid-cell (+ (* grid-cell scale) offset)
          grid-cell-inc1 (+ (* grid-cell-inc1 scale) offset))
    (multf grid-cell grid-cell)
    (multf grid-cell-inc1 grid-cell-inc1)
    (setf x (* (vec4 (.x grid-cell) (.x grid-cell-inc1) (.x grid-cell) (.x grid-cell-inc1))
               (vec4 (.yy grid-cell) (.yy grid-cell-inc1))))
    (values (fract (* x (.z grid-cell) (/ "69412.070313")))
            (fract (* x (.z grid-cell-inc1) (/ "69412.070313"))))))

(defun-gpu fast32-2 ((grid-cell :vec4))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let ((offset (vec4 "16.841230" "18.774548" "16.873274" "13.664607"))
        (scale (vec4 "0.102007" "0.114473" "0.139651" "0.084550"))
        (grid-cell-inc1 (* (step grid-cell (vec4 67.5)) (1+ grid-cell)))
        ((x :vec4))
        ((z :vec4)))
    (setf grid-cell (+ (* grid-cell scale) offset)
          grid-cell-inc1 (+ (* grid-cell-inc1 scale) offset))
    (multf grid-cell grid-cell)
    (multf grid-cell-inc1 grid-cell-inc1)
    (setf x (* (vec4 (.x grid-cell) (.x grid-cell-inc1) (.x grid-cell) (.x grid-cell-inc1))
               (vec4 (.yy grid-cell) (.yy grid-cell-inc1)))
          z (* (vec4 (.z grid-cell) (.z grid-cell-inc1) (.z grid-cell) (.z grid-cell-inc1))
               (vec4 (.ww grid-cell) (.ww grid-cell-inc1))
               (/ "47165.636719")))
    (values (fract (* x (.x z)))
            (fract (* x (.y z)))
            (fract (* x (.z z)))
            (fract (* x (.w z))))))

(defun-gpu fast32-2/4-per-corner ((grid-cell :vec4))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let ((offset (vec4 "16.841230" "18.774548" "16.873274" "13.664607"))
        (scale (vec4 "0.102007" "0.114473" "0.139651" "0.084550"))
        (grid-cell-inc1 (* (step grid-cell (vec4 67.5)) (1+ grid-cell)))
        ((x :vec4))
        ((z :vec4))
        ((z0w0-0 :vec4))
        ((z0w0-1 :vec4))
        ((z0w0-2 :vec4))
        ((z0w0-3 :vec4))
        ((z1w0-0 :vec4))
        ((z1w0-1 :vec4))
        ((z1w0-2 :vec4))
        ((z1w0-3 :vec4))
        ((z0w1-0 :vec4))
        ((z0w1-1 :vec4))
        ((z0w1-2 :vec4))
        ((z0w1-3 :vec4))
        ((z1w1-0 :vec4))
        ((z1w1-1 :vec4))
        ((z1w1-2 :vec4))
        ((z1w1-3 :vec4))
        ((hash-val :vec4)))
    (setf grid-cell (+ (* grid-cell scale) offset)
          grid-cell-inc1 (+ (* grid-cell-inc1 scale) offset))
    (multf grid-cell grid-cell)
    (multf grid-cell-inc1 grid-cell-inc1)
    (setf x (* (vec4 (.x grid-cell) (.x grid-cell-inc1) (.x grid-cell) (.x grid-cell-inc1))
               (vec4 (.yy grid-cell) (.yy grid-cell-inc1)))
          z (* (vec4 (.z grid-cell) (.z grid-cell-inc1) (.z grid-cell) (.z grid-cell-inc1))
               (vec4 (.ww grid-cell) (.ww grid-cell-inc1)))
          hash-val (* x (.x z))
          z0w0-0 (fract (* hash-val (/ "56974.746094")))
          z0w0-1 (fract (* hash-val (/ "47165.636719")))
          z0w0-2 (fract (* hash-val (/ "55049.667969")))
          z0w0-3 (fract (* hash-val (/ "49901.273438")))
          hash-val (* x (.y z))
          z1w0-0 (fract (* hash-val (/ "56974.746094")))
          z1w0-1 (fract (* hash-val (/ "47165.636719")))
          z1w0-2 (fract (* hash-val (/ "55049.667969")))
          z1w0-3 (fract (* hash-val (/ "49901.273438")))
          hash-val (* x (.z z))
          z0w1-0 (fract (* hash-val (/ "56974.746094")))
          z0w1-1 (fract (* hash-val (/ "47165.636719")))
          z0w1-2 (fract (* hash-val (/ "55049.667969")))
          z0w1-3 (fract (* hash-val (/ "49901.273438")))
          hash-val (* x (.w z))
          z1w1-0 (fract (* hash-val (/ "56974.746094")))
          z1w1-1 (fract (* hash-val (/ "47165.636719")))
          z1w1-2 (fract (* hash-val (/ "55049.667969")))
          z1w1-3 (fract (* hash-val (/ "49901.273438"))))
    (values z0w0-0 z0w0-1 z0w0-2 z0w0-3
            z1w0-0 z1w0-1 z1w0-2 z1w0-3
            z0w1-0 z0w1-1 z0w1-2 z0w1-3
            z1w1-0 z1w1-1 z1w1-2 z1w1-3)))
