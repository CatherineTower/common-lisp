(in-package :umbra.graph)

;;;; Graphing
;;;; Credits:
;;;; Mikael Hvidtfeldt Christensen http://blog.hvidtfeldts.net/index.php/2011/07/plotting-high-frequency-functions-using-a-gpu/
;;;; Chris Bagley https://github.com/cbaggers/nineveh/blob/master/graphing/graph.lisp

(defun-gpu axis ((uv :vec2)
                 (xy-range :vec4)
                 (style :vec4))
  (let* ((color (v4:make (.xyz style) 1))
         (diff (/ (.xz xy-range) (- (.yw xy-range) (.xz xy-range))))
         (uv (+ uv diff)))
    (+ (* color (smoothstep (.w style) 0 (abs (.x uv))))
       (* color (smoothstep (.w style) 0 (abs (.y uv)))))))

(defun-gpu graph ((func (function (:float) :float))
                  (uv :vec2)
                  (xy-range :vec4)
                  (line-style :vec4)
                  (axis-style :vec4)
                  (samples :int))
  (incf (.xy xy-range) (v2:make (.w line-style)))
  (let* ((axis (axis uv xy-range axis-style))
         (diff (- (.yw xy-range) (.xz xy-range)))
         (uv (+ (* uv diff) (.xz xy-range)))
         (samples (float samples))
         (max-dist (* (.w line-style) diff))
         (step (/ max-dist samples))
         (count 0.0)
         (my-samples 0.0))
    (for (i 0.0) (< i samples) (++ i)
         (let ((fx (funcall func (+ (.x uv) (* i (.x step))))))
           (for (j 0.0) (< j samples) (++ j)
                (when (> (+ (* i i) (* j j)) (* samples samples))
                  (continue))
                (incf my-samples 1.0)
                (let ((diff (- fx (+ (.y uv) (* j (.y step))))))
                  (incf count (1- (* (step 0.0 diff) 2.0)))))))
    (values (+ (* (if (/ (abs count) my-samples)
                      (- 1.0 (/ (abs (float count)) (float my-samples)))
                      0.0)
                  (v4:make (.xyz line-style) 1))
               axis)
            (funcall func (.x uv)))))
