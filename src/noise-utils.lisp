(in-package #:net.mfiano.lisp.umbra.noise)

;;;; Noise utility functions

(defun fbm ((point :vec2)
            (octaves :uint)
            (frequency :float)
            (gain :float)
            (lacunarity :float)
            (noise (function (:vec2) :float)))
  (let ((value 0.0)
        (amplitude 0.5))
    (dotimes (i octaves)
      (incf value (* amplitude (funcall noise (* point frequency))))
      (setf point (* point lacunarity)
            amplitude (* amplitude gain)))
    value))

(defun fbm ((point :vec3)
            (octaves :uint)
            (frequency :float)
            (gain :float)
            (lacunarity :float)
            (noise (function (:vec3) :float)))
  (let ((value 0.0)
        (amplitude 0.5))
    (dotimes (i octaves)
      (incf value (* amplitude (funcall noise (* point frequency))))
      (setf point (* point lacunarity)
            amplitude (* amplitude gain)))
    value))

(defun fbm ((point :vec4)
            (octaves :uint)
            (frequency :float)
            (gain :float)
            (lacunarity :float)
            (noise (function (:vec4) :float)))
  (let ((value 0.0)
        (amplitude 0.5))
    (dotimes (i octaves)
      (incf value (* amplitude (funcall noise (* point frequency))))
      (setf point (* point lacunarity)
            amplitude (* amplitude gain)))
    value))

(defun ridges ((point :vec2)
               (octaves :uint)
               (frequency :float)
               (gain :float)
               (lacunarity :float)
               (exponent :float)
               (offset :float)
               (noise (function (:vec2) :float)))
  (let ((value 0.0)
        (amplitude 0.5)
        (previous 1.0))
    (dotimes (i octaves)
      (let* ((n (funcall noise (* point frequency)))
             (n (- offset (abs n)))
             (n (expt n exponent)))
        (incf value (* n amplitude previous))
        (setf previous n
              frequency (* frequency lacunarity)
              amplitude (* amplitude gain))))
    value))

(defun ridges ((point :vec3)
               (octaves :uint)
               (frequency :float)
               (gain :float)
               (lacunarity :float)
               (exponent :float)
               (offset :float)
               (noise (function (:vec3) :float)))
  (let ((value 0.0)
        (amplitude 0.5)
        (previous 1.0))
    (dotimes (i octaves)
      (let* ((n (funcall noise (* point frequency)))
             (n (- offset (abs n)))
             (n (expt n exponent)))
        (incf value (* n amplitude previous))
        (setf previous n
              frequency (* frequency lacunarity)
              amplitude (* amplitude gain))))
    value))

(defun ridges ((point :vec4)
               (octaves :uint)
               (frequency :float)
               (gain :float)
               (lacunarity :float)
               (exponent :float)
               (offset :float)
               (noise (function (:vec4) :float)))
  (let ((value 0.0)
        (amplitude 0.5)
        (previous 1.0))
    (dotimes (i octaves)
      (let* ((n (funcall noise (* point frequency)))
             (n (- offset (abs n)))
             (n (expt n exponent)))
        (incf value (* n amplitude previous))
        (setf previous n
              frequency (* frequency lacunarity)
              amplitude (* amplitude gain))))
    value))

(defun billow ((point :vec2)
               (octaves :uint)
               (frequency :float)
               (gain :float)
               (lacunarity :float)
               (noise (function (:vec2) :float)))
  (let ((value 0.0)
        (amplitude 0.5))
    (dotimes (i octaves)
      (incf value (* (1- (* (abs (funcall noise (* point frequency))) 2))
                     amplitude))
      (setf point (* point lacunarity)
            amplitude (* amplitude gain)))
    value))

(defun billow ((point :vec3)
               (octaves :uint)
               (frequency :float)
               (gain :float)
               (lacunarity :float)
               (noise (function (:vec3) :float)))
  (let ((value 0.0)
        (amplitude 0.5))
    (dotimes (i octaves)
      (incf value (* (1- (* (abs (funcall noise (* point frequency))) 2))
                     amplitude))
      (setf point (* point lacunarity)
            amplitude (* amplitude gain)))
    value))

(defun billow ((point :vec4)
               (octaves :uint)
               (frequency :float)
               (gain :float)
               (lacunarity :float)
               (noise (function (:vec4) :float)))
  (let ((value 0.0)
        (amplitude 0.5))
    (dotimes (i octaves)
      (incf value (* (1- (* (abs (funcall noise (* point frequency))) 2))
                     amplitude))
      (setf point (* point lacunarity)
            amplitude (* amplitude gain)))
    value))
