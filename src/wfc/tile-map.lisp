(in-package #:cl-user)

(defpackage #:%syntex.wfc.tile-map
  (:local-nicknames
   (#:grid #:%syntex.wfc.grid)
   (#:pat #:%syntex.wfc.pattern)
   (#:pq #:damn-fast-priority-queue)
   (#:rng #:seedable-rng)
   (#:u #:golden-utils))
  (:use #:cl)
  (:export
   #:initialize))

(in-package #:%syntex.wfc.tile-map)

(defstruct (tile
            (:conc-name nil)
            (:predicate nil)
            (:copier nil))
  (possible (u:dict #'eql) :type hash-table)
  (weight-sum 0 :type u:non-negative-fixnum)
  (weight-log-weight-sum 0.0 :type u:f32)
  (entropy-noise 0.0 :type u:f32)
  (collapsed-p nil :type boolean)
  (enabler-counts (make-array 0) :type simple-array))

(defun calculate-total-possible-frequency (frequencies)
  (let ((total 0))
    (dotimes (i (length frequencies))
      (incf total (aref frequencies i)))
    total))

(defun foo (frequencies)
  (let ((total 0))
    (dotimes (i (length frequencies))
      (let ((w (aref frequencies i)))
        (incf total (* w (log w 2)))))
    total))

(defun initialize-tile-enabler-counts (tile adjacencies pattern-count)
  (let ((counts (make-array pattern-count)))
    (dotimes (id pattern-count)
      (let ((table (u:dict #'eq :left 0 :right 0 :up 0 :down 0)))
        (dolist (direction '(:left :right :up :down))
          (incf (u:href table direction) (length (u:href adjacencies id direction))))
        (setf (aref counts id) table)))
    (setf (enabler-counts tile) counts)))

(defun initialize (grid rng pattern-count adjacencies frequencies)
  (grid:do-cells (grid cell)
    (let* ((entropy-noise (rng:float rng 0.0 0.001))
           (tile (make-tile :entropy-noise entropy-noise)))
      (dotimes (i pattern-count)
        (setf (u:href (possible tile) i) t))
      (setf (weight-sum tile) (calculate-total-possible-frequency frequencies)
            (weight-log-weight-sum tile) (foo frequencies))
      (initialize-tile-enabler-counts tile adjacencies pattern-count)
      (setf (grid:value cell) tile))))

(defun remove-tile (tile index frequencies)
  (let ((frequency (aref frequencies index)))
    (decf (weight-sum tile) frequency)
    (decf (weight-log-weight-sum tile) (* frequency (log frequency 2)))
    (remhash index (possible tile))))

(defun compute-entropy (tile)
  (let ((weight-sum (weight-sum tile))
        (weight-log-weight-sum (weight-log-weight-sum tile))
        (noise (entropy-noise tile)))
    (+ (- (log weight-sum 2) (/ weight-log-weight-sum weight-sum)) noise)))

(defun choose-tile (entropy-heap)
  (u:while (pq:peek entropy-heap)
    (let ((tile (pq:dequeue entropy-heap)))
      (unless (collapsed-p (grid:value tile))
        (return-from choose-tile tile))))
  (error "Bug: Entropy heap is empty but there are still un-collapsed tiles."))

(defun choose-tile-index (tile rng frequencies)
  (let ((remaining (rng:int rng 0 (weight-sum tile))))
    (u:do-hash-keys (k (possible tile))
      (let ((weight (aref frequencies k)))
        (if (>= remaining weight)
            (decf remaining weight)
            (return-from choose-tile-index k))))
    (error "foo")))

(defun collapse-tile (rng tile-map tile-removals frequencies x y)
  (let* ((tile (grid:value (grid:get-cell tile-map x y :periodic-p t)))
         (possible (possible tile))
         (tile-index (choose-tile-index tile rng frequencies)))
    (setf (collapsed-p tile) t)
    (u:do-hash-keys (k (u:copy-hash-table possible))
      (unless (= k tile-index)
        (remhash k possible)
        (vector-push-extend (list k x y) tile-removals)))))
