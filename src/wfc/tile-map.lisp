(in-package #:%syntex.wfc.tile-map)

(defstruct (tile-data
            (:conc-name nil)
            (:predicate nil)
            (:copier nil))
  (possible-patterns (u:dict #'eql) :type hash-table)
  (total-weight 0 :type u:non-negative-fixnum)
  (total-weight-log-weight 0.0 :type u:f32)
  (entropy-noise 0.0 :type u:f32))

(defun calculate-initial-weights (core tile)
  (let ((frequencies (core:frequencies core))
        (tile-data (grid:value tile))
        (total-weight 0)
        (total-weight-log-weight 0.0))
    (u:do-hash-keys (pattern-id (possible-patterns tile-data))
      (let ((frequency (aref frequencies pattern-id)))
        (incf total-weight frequency)
        (incf total-weight-log-weight (* frequency (log frequency 2)))))
    (values total-weight
            total-weight-log-weight)))

(defun prepare (core)
  (let ((rng (core:rng core))
        (tile-map (core:tile-map core))
        (pattern-count (pat:get-count (core:patterns core))))
    (grid:do-cells (tile-map tile)
      (let* ((entropy-noise (rng:float rng 0.0 0.0001))
             (data (make-tile-data :entropy-noise entropy-noise)))
        (setf (grid:value tile) data)
        (dotimes (i pattern-count)
          (setf (u:href (possible-patterns data) i) i))
        (u:mvlet ((total-weight total-weight-log-weight (calculate-initial-weights core tile)))
          (setf (total-weight data) total-weight
                (total-weight-log-weight data) total-weight-log-weight))))))

(defun compute-entropy (tile)
  (let* ((tile-data (grid:value tile))
         (total-weight-log-weight (total-weight-log-weight tile-data)))
    (+ (- (log total-weight-log-weight 2)
          (/ total-weight-log-weight (total-weight tile-data)))
       (entropy-noise tile-data))))

(defun remove-tile (core tile pattern-id)
  (let ((tile-data (grid:value tile))
        (frequency (aref (core:frequencies core) pattern-id)))
    (remhash pattern-id (possible-patterns tile-data))
    (decf (total-weight tile-data) frequency)
    (decf (total-weight-log-weight tile-data) (* frequency (log frequency 2)))))
