(in-package #:%syntex.wfc.solver)

(u:fn-> enqueue-initial-tile (core:core) null)
(defun enqueue-initial-tile (core)
  (declare (optimize speed))
  (let* ((tile-map (core:tile-map core))
         (grid (tm:grid tile-map))
         (width (grid:width grid))
         (height (grid:height grid))
         (entropy-queue (tm:entropy-queue tile-map))
         (tile (grid:get-cell grid (truncate width 2) (truncate height 2))))
    (pq:enqueue entropy-queue tile (tm:compute-entropy tile))
    nil))

(u:fn-> propagate (core:core &key (:periodic-p boolean)) null)
(defun propagate (core &key periodic-p)
  (declare (optimize speed))
  (let* ((adjacencies (core:adjacencies core))
         (tile-map (core:tile-map core))
         (entropy-queue (tm:entropy-queue tile-map)))
    (u:while (tm:pattern-removal-stack tile-map)
      (let ((removal (pop (tm:pattern-removal-stack tile-map))))
        (destructuring-bind (tile . removed-pattern-id) removal
          (let ((pattern-adjacencies (aref adjacencies removed-pattern-id)))
            (dolist (direction '(:left :right :up :down))
              (u:when-let ((opposite-direction (core:invert-direction direction))
                           (neighbor (tm:get-neighbor tile-map
                                                      tile
                                                      direction
                                                      :periodic-p periodic-p)))
                (dolist (pattern-id (u:href pattern-adjacencies direction))
                  (when (and (= (tm:enabler-count core neighbor pattern-id opposite-direction) 1)
                             (tm:possible-pattern-p neighbor pattern-id)
                             (tm:positive-enabler-counts-p core neighbor pattern-id))
                    (unless (tm:remove-possible-pattern core neighbor pattern-id)
                      (return-from propagate nil))
                    (pq:enqueue entropy-queue neighbor (tm:compute-entropy neighbor))
                    (push (cons neighbor pattern-id) (tm:pattern-removal-stack tile-map)))
                  (decf (tm:enabler-count core neighbor pattern-id opposite-direction)))))))))))

(u:fn-> update-progress (core:core &key (:show-p boolean)) null)
(defun update-progress (core &key show-p)
  (declare (optimize speed))
  (let* ((tile-map (core:tile-map core))
         (tile-count (tm:tile-count tile-map))
         (current (truncate (- tile-count (core:uncollapsed-count core))
                            (/ tile-count 100)))
         (progress (core:progress core)))
    (declare ((integer 0 100) current))
    (when (/= current progress)
      (when show-p
        (cond
          ((zerop progress)
           (format t "~&0%"))
          ((= current 100)
           (format t "100%~%"))
          ((zerop (mod current 10))
           (format t "~d%" current))
          (t (format t ".")))
        (finish-output))
      (setf (core:progress core) current))
    nil))

(u:fn-> solve (core:core &key (:periodic-p boolean) (:show-progress-p boolean)) null)
(defun solve (core &key periodic-p show-progress-p)
  (declare (optimize speed))
  (enqueue-initial-tile core)
  (u:while (plusp (core:uncollapsed-count core))
    (let ((tile (tm:choose-tile core)))
      (tm:collapse-tile core tile)
      (propagate core :periodic-p periodic-p)
      (hist:advance-time core)
      (update-progress core :show-p show-progress-p))))
