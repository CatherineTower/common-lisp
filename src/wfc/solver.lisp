(in-package #:%syntex.wfc)

(u:fn-> enqueue-initial-tile (core) null)
(defun enqueue-initial-tile (core)
  (declare (optimize debug))
  (let* ((tile-map (tile-map core))
         (x (rng:int *rng* 0 (width tile-map) nil))
         (y (rng:int *rng* 0 (height tile-map) nil))
         (tile (get-cell tile-map x y)))
    (pq:enqueue (entropy-queue tile-map) tile (compute-entropy tile))
    nil))

(defun propagate/neighbor (core origin direction pattern-ids)
  (let* ((tile-map (tile-map core))
         (entropy-queue (entropy-queue tile-map)))
    (lambda (tile)
      (dolist (pattern-id pattern-ids)
        (when (pattern-removable-p core origin tile pattern-id direction)
          (unless (ban-pattern core tile pattern-id)
            (warn 'cond:wfc-contradiction-warning :progress (progress core))
            (ecase (strategy core)
              (:backtrack
               (backtrack core))
              (:none
               (error 'cond:wfc-contradiction-error)))
            (throw :contradiction nil))
          (pq:enqueue entropy-queue tile (compute-entropy tile))
          (push (cons tile pattern-id) (pattern-removal-stack tile-map)))))))

(defun propagate/map (core tile pattern-id &key periodic-p)
  (let* ((tile-map (tile-map core))
         (kernel (neighbor-kernel tile-map))
         (x (x tile))
         (y (y tile))
         (adjacent-patterns (aref (adjacencies core) pattern-id)))
    (flet ((%map (origin direction opposite-direction)
             (let ((pattern-ids (u:href adjacent-patterns direction)))
               (propagate/neighbor core origin opposite-direction pattern-ids))))
      (align-kernel kernel x y)
      (map-kernel/left kernel (%map tile :left :right) :periodic-p periodic-p)
      (map-kernel/right kernel (%map tile :right :left) :periodic-p periodic-p)
      (map-kernel/up kernel (%map tile :up :down) :periodic-p periodic-p)
      (map-kernel/down kernel (%map tile :down :up) :periodic-p periodic-p))))

(defun propagate (core &key periodic-p)
  (let ((tile-map (tile-map core)))
    (u:while (pattern-removal-stack tile-map)
      (destructuring-bind (tile . pattern-id) (pop (pattern-removal-stack tile-map))
        (catch :contradiction
          (propagate/map core tile pattern-id :periodic-p periodic-p))))))

(u:fn-> update-progress (core &key (:show-p boolean)) null)
(defun update-progress (core &key show-p)
  (declare (optimize speed))
  (let* ((tile-map (tile-map core))
         (tile-count (cell-count tile-map))
         (uncollapsed-count (uncollapsed-count tile-map))
         (current (truncate (- tile-count uncollapsed-count)
                            (/ tile-count 100)))
         (progress (progress core)))
    (declare (u:non-negative-fixnum uncollapsed-count)
             ((integer 0 100) current progress)
             (u:ub32 tile-count))
    (when (/= current progress)
      (when show-p
        (cond
          ((zerop progress)
           (format t "~&0%"))
          ((= current 100)
           (format t "100%~%"))
          ((zerop (mod current 10))
           (format t "~d%" current))
          (t (format t ".")))
        (finish-output))
      (setf (progress core) current))
    nil))

(u:fn-> solve (core &key (:periodic-p boolean) (:show-progress-p boolean)) null)
(defun solve (core &key periodic-p show-progress-p)
  (declare (optimize speed))
  (let ((tile-map (tile-map core)))
    (format t "~&Solving...~%")
    (enqueue-initial-tile core)
    (u:while (plusp (the u:non-negative-fixnum (uncollapsed-count tile-map)))
      (collapse-tile core (choose-tile core))
      (propagate core :periodic-p periodic-p)
      (advance-time core)
      (update-progress core :show-p show-progress-p))
    (tg:gc :full t)
    nil))
