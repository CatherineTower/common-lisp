(in-package #:%syntex.wfc.history)

(declaim (inline %make-history))
(defstruct (history
            (:constructor %make-history)
            (:conc-name nil)
            (:predicate nil)
            (:copier nil))
  (timestamp 0 :type u:non-negative-fixnum)
  (last-progress 0 :type (integer 0 100))
  (entries (make-array 32 :fill-pointer 0 :adjustable t :initial-element nil) :type vector)
  (distance 1 :type u:positive-fixnum)
  (max-retries 10 :type u:positive-fixnum)
  (try 0 :type u:non-negative-fixnum))

(defun make-history (&key distance retries)
  (let ((history (%make-history :distance distance :max-retries retries)))
    (vector-push-extend 0 (entries history))
    history))

(u:fn-> advance-time (core:core) null)
(declaim (inline advance-time))
(defun advance-time (core)
  (declare (optimize speed))
  (let* ((history (core:history core))
         (entries (entries history)))
    (incf (timestamp history))
    (vector-push-extend (timestamp history) entries)
    nil))

(u:fn-> record (core:core function &optional t) null)
(declaim (inline record))
(defun record (core func &optional arg)
  (declare (optimize speed))
  (when (eq (core:strategy core) :backtrack)
    (vector-push-extend (cons func arg) (entries (core:history core))))
  nil)

(u:fn-> backtrack (core:core) null)
(defun backtrack (core)
  (declare (optimize speed))
  (let* ((history (core:history core))
         (timestamp (timestamp history))
         (entries (entries history))
         (target-timestamp (max 0 (- timestamp (distance history))))
         (progress (core:progress core))
         (stop-p nil))
    (u:until (or stop-p (zerop (length entries)))
      (let ((item (vector-pop entries)))
        (etypecase item
          (cons
           (destructuring-bind (func . arg) item
             (declare (function func))
             (funcall func arg)))
          (integer
           (incf (core:uncollapsed-count core))
           (setf (timestamp history) item
                 stop-p (< item target-timestamp))))))
    (if (> progress (last-progress history))
        (setf (try history) 0)
        (incf (try history)))
    (when (>= (try history) (max-retries history))
      (error 'cond:wfc-max-backtrack-retries-exceeded :value (try history)))
    (setf (last-progress history) progress)
    nil))
