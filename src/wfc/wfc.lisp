(in-package #:%syntex.wfc)

(u:fn-> make-output (core:core) u:ub8a)
(defun make-output (core)
  (declare (optimize speed))
  (let* ((tile-map (core:tile-map core))
         (grid (tm:grid tile-map))
         (width (grid:width grid))
         (height (grid:height grid))
         (data (u:make-ub32-array (tm:tile-count tile-map))))
    (grid:do-cells (grid cell)
      (let ((color (grid:value cell)))
        (setf (aref data (+ (* (grid:y cell) width) (grid:x cell))) color)))
    (img:unpack data width height)))

(u:fn-> render (core:core &key (:path (or pathname string))) (values))
(defun render (core &key path)
  (declare (optimize speed))
  (let* ((grid (tm:grid (core:tile-map core)))
         (width (grid:width grid))
         (height (grid:height grid)))
    (img:write (make-output core) width height path)
    (format t "~&Image written to: ~s~%" (namestring path))
    (values)))

(defun wfc (sample-path
            &key
              seed
              width
              height
              (pattern-size 2)
              (periodic-input-p t)
              (periodic-output-p nil)
              (strategy :backtrack)
              (backtrack-distance 1)
              (backtrack-retries 10)
              (render-p t)
              (show-progress-p t)
              output-path)
  (com:check-file-exists sample-path)
  (com:check-image-dimension :width width)
  (com:check-image-dimension :height height)
  (com:check-seed seed)
  (com:check-output-path output-path)
  (unless (typep pattern-size '(integer 2 255))
    (error 'cond:invalid-wfc-pattern-size :value pattern-size))
  (unless (typep strategy 'core:strategy)
    (error 'cond:invalid-wfc-strategy :value strategy :allowed '(:backtrack)))
  (unless (typep backtrack-distance 'u:positive-fixnum)
    (error 'cond:invalid-wfc-backtrack-distance :value backtrack-distance))
  (unless (typep backtrack-retries 'u:positive-fixnum)
    (error 'cond:invalid-wfc-backtrack-retry-count :value backtrack-retries))
  (let* ((sample (sample:load sample-path))
         (history (hist:make-history :distance backtrack-distance :retries backtrack-retries))
         (core (core:make-core :seed seed :sample sample :history history :strategy strategy)))
    (pat:analyze core :size pattern-size :periodic-p periodic-input-p)
    (tm:make-tile-map core :width width :height height)
    (solver:solve core :periodic-p periodic-output-p :show-progress-p show-progress-p)
    (if render-p
        (render core :path output-path)
        (make-output core))))
