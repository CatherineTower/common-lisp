(in-package :gamebox-math)

(eval-when (:compile-toplevel :load-toplevel)
  (defun* matrix-identity! ((matrix matrix)) (:result matrix :inline t :abbrev mid!)
    (with-matrix (m matrix)
      (psetf m00 1.0 m01 0.0 m02 0.0 m03 0.0
             m10 0.0 m11 1.0 m12 0.0 m13 0.0
             m20 0.0 m21 0.0 m22 1.0 m23 0.0
             m30 0.0 m31 0.0 m32 0.0 m33 1.0))
    matrix)

  (defun* matrix-identity () (:result matrix :inline t :abbrev mid)
    (matrix-identity! (matrix)))

  (define-constant +identity-matrix+ (matrix-identity) :test #'equalp))

(defun* matrix-test () (:result matrix :abbrev mtest)
  (with-matrix (m (matrix))
    (psetf m00 1.0 m01 5.0 m02 9.0 m03 13.0
           m10 2.0 m11 6.0 m12 10.0 m13 14.0
           m20 3.0 m21 7.0 m22 11.0 m23 15.0
           m30 4.0 m31 8.0 m32 12.0 m33 16.0)
    m))

(defun* matrix-copy! ((out-matrix matrix) (matrix matrix)) (:result matrix :inline t :abbrev mcp!)
  (with-matrices ((o out-matrix) (m matrix))
    (psetf o00 m00 o01 m01 o02 m02 o03 m03
           o10 m10 o11 m11 o12 m12 o13 m13
           o20 m20 o21 m21 o22 m22 o23 m23
           o30 m30 o31 m31 o32 m32 o33 m33))
  out-matrix)

(defun* matrix-copy ((matrix matrix)) (:result matrix :inline t :abbrev mcp)
  (matrix-copy! (matrix) matrix))

(defun* matrix-clamp! ((out-matrix matrix) (matrix matrix) &key
                       ((min single-float) least-negative-single-float)
                       ((max single-float) most-positive-single-float))
    (:result matrix :inline t :abbrev mclamp!)
  (with-matrices ((o out-matrix) (m matrix))
    (psetf o00 (clamp m00 min max) o01 (clamp m01 min max) o02 (clamp m02 min max) o03 (clamp m03 min max)
           o10 (clamp m10 min max) o11 (clamp m11 min max) o12 (clamp m12 min max) o13 (clamp m13 min max)
           o20 (clamp m20 min max) o21 (clamp m21 min max) o22 (clamp m22 min max) o23 (clamp m23 min max)
           o30 (clamp m30 min max) o31 (clamp m31 min max) o32 (clamp m32 min max) o33 (clamp m33 min max)))
  out-matrix)

(defun* matrix-clamp ((matrix matrix) &key
                      ((min single-float) least-negative-single-float)
                      ((max single-float) most-positive-single-float))
    (:result matrix :inline t :abbrev mclamp)
  (matrix-clamp! (matrix) matrix :min min :max max))

(defun* matrix*! ((out-matrix matrix) (matrix1 matrix) (matrix2 matrix)) (:result matrix :inline t :abbrev m*!)
  (with-matrices ((o out-matrix) (a matrix1) (b matrix2))
    (psetf o00 (+ (* a00 b00) (* a10 b01) (* a20 b02) (* a30 b03))
           o01 (+ (* a01 b00) (* a11 b01) (* a21 b02) (* a31 b03))
           o02 (+ (* a02 b00) (* a12 b01) (* a22 b02) (* a32 b03))
           o03 (+ (* a03 b00) (* a13 b01) (* a23 b02) (* a33 b03))
           o10 (+ (* a00 b10) (* a10 b11) (* a20 b12) (* a30 b13))
           o11 (+ (* a01 b10) (* a11 b11) (* a21 b12) (* a31 b13))
           o12 (+ (* a02 b10) (* a12 b11) (* a22 b12) (* a32 b13))
           o13 (+ (* a03 b10) (* a13 b11) (* a23 b12) (* a33 b13))
           o20 (+ (* a00 b20) (* a10 b21) (* a20 b22) (* a30 b23))
           o21 (+ (* a01 b20) (* a11 b21) (* a21 b22) (* a31 b23))
           o22 (+ (* a02 b20) (* a12 b21) (* a22 b22) (* a32 b23))
           o23 (+ (* a03 b20) (* a13 b21) (* a23 b22) (* a33 b23))
           o30 (+ (* a00 b30) (* a10 b31) (* a20 b32) (* a30 b33))
           o31 (+ (* a01 b30) (* a11 b31) (* a21 b32) (* a31 b33))
           o32 (+ (* a02 b30) (* a12 b31) (* a22 b32) (* a32 b33))
           o33 (+ (* a03 b30) (* a13 b31) (* a23 b32) (* a33 b33))))
  out-matrix)

(defun* matrix* ((matrix1 matrix) (matrix2 matrix)) (:result matrix :inline t :abbrev m*)
  (matrix*! (matrix) matrix1 matrix2))

(defun* matrix-translation-to-vec! ((out-vec vec) (matrix matrix)) (:result vec :inline t :abbrev mtr->v!)
  (with-vector (o out-vec)
    (with-matrix (m matrix)
      (psetf ox m03 oy m13 oz m23)))
  out-vec)

(defun* matrix-translation-to-vec ((matrix matrix)) (:result vec :inline t :abbrev mtr->v)
  (matrix-translation-to-vec! (vec) matrix))

(defun* matrix-translation-from-vec! ((matrix matrix) (vec vec)) (:result matrix :inline t :abbrev v->mtr!)
  (with-matrix (m matrix)
    (with-vector (v vec)
      (psetf m03 vx m13 vy m23 vz)))
  matrix)

(defun* matrix-translation-from-vec ((matrix matrix) (vec vec)) (:result matrix :inline t :abbrev v->mtr)
  (matrix-translation-from-vec! (matrix-copy matrix) vec))

(defun* matrix-translate! ((out-matrix matrix) (matrix matrix) (vec vec)) (:result matrix :inline t :abbrev mtr!)
  (matrix*! out-matrix matrix (matrix-translation-from-vec (matrix-identity) vec)))

(defun* matrix-translate ((matrix matrix) (vec vec)) (:result matrix :inline t :abbrev mtr)
  (matrix-translate! (matrix-identity) matrix vec))

(defun* matrix-copy-rotation! ((out-matrix matrix) (matrix matrix)) (:result matrix :inline t :abbrev mcprot!)
  (with-matrices ((o out-matrix) (m matrix))
    (psetf o00 m00 o01 m01 o02 m02
           o10 m10 o11 m11 o12 m12
           o20 m20 o21 m21 o22 m22))
  out-matrix)

(defun* matrix-copy-rotation ((matrix matrix)) (:result matrix :inline t :abbrev mcprot)
  (matrix-copy-rotation! (matrix-identity) matrix))

(defun* matrix-rotation-to-vec! ((out-vec vec) (matrix matrix) (axis keyword)) (:result vec :inline t :abbrev mrot->v!)
  (with-vector (v out-vec)
    (with-matrix (m matrix)
      (ecase axis
        (:x (psetf vx m00 vy m10 vz m20))
        (:y (psetf vx m01 vy m11 vz m21))
        (:z (psetf vx m02 vy m12 vz m22)))))
  out-vec)

(defun* matrix-rotation-to-vec ((matrix matrix) (axis keyword)) (:result vec :inline t :abbrev mrot->v)
  (matrix-rotation-to-vec! (vec) matrix axis))

(defun* matrix-rotation-from-vec! ((matrix matrix) (vec vec) (axis keyword)) (:result matrix :inline t :abbrev v->mrot!)
  (with-matrix (m matrix)
    (with-vector (v vec)
      (ecase axis
        (:x (psetf m00 vx m10 vy m20 vz))
        (:y (psetf m01 vx m11 vy m21 vz))
        (:z (psetf m02 vx m12 vy m22 vz)))))
  matrix)

(defun* matrix-rotation-from-vec ((matrix matrix) (vec vec) (axis keyword)) (:result matrix :inline t :abbrev v->mrot)
  (matrix-rotation-from-vec! (matrix-copy matrix) vec axis))

(defun* matrix-rotate! ((out-matrix matrix) (matrix matrix) (vec vec)) (:result matrix :inline t :abbrev mrot!)
  (macrolet ((rotate-angle (angle s c &body body)
               `(when (> (abs ,angle) +epsilon+)
                  (let ((,s (sin ,angle))
                        (,c (cos ,angle)))
                    ,@body
                    (matrix*! out-matrix m out-matrix)))))
    (let ((rotation (matrix)))
      (with-matrix (m (matrix-identity! rotation))
        (with-vector (v vec)
          (matrix-copy! out-matrix matrix)
          (rotate-angle vz s c
                        (psetf m00 c m01 (- s)
                               m10 s m11 c))
          (rotate-angle vx s c
                        (psetf m00 1.0 m01 0.0 m02 0.0
                               m10 0.0 m11 c m12 (- s)
                               m20 0.0 m21 s m22 c))
          (rotate-angle vy s c
                        (psetf m00 c m01 0.0 m02 s
                               m10 0.0 m11 1.0 m12 0.0
                               m20 (- s) m21 0.0 m22 c))))))
  out-matrix)

(defun* matrix-rotate ((matrix matrix) (vec vec)) (:result matrix :inline t :abbrev mrot)
  (matrix-rotate! (matrix-identity) matrix vec))

(defun* matrix-scale-to-vec! ((out-vec vec) (matrix matrix)) (:result vec :inline t :abbrev mscale->v!)
  (with-vector (v out-vec)
    (with-matrix (m matrix)
      (psetf vx m00 vy m11 vz m22)))
  out-vec)

(defun* matrix-scale-to-vec ((matrix matrix)) (:result vec :inline t :abbrev mscale->v)
  (matrix-scale-to-vec! (vec) matrix))

(defun* matrix-scale-from-vec! ((matrix matrix) (vec vec)) (:result matrix :inline t :abbrev v->mscale!)
  (with-matrix (m matrix)
    (with-vector (v vec)
      (psetf m00 vx m11 vy m22 vz)))
  matrix)

(defun* matrix-scale-from-vec ((matrix matrix) (vec vec)) (:result matrix :inline t :abbrev v->mscale)
  (matrix-scale-from-vec! (matrix-copy matrix) vec))

(defun* matrix*vec! ((out-vec vec) (matrix matrix) (vec vec)) (:result vec :inline t :abbrev m*v!)
  (with-vectors ((v vec) (o out-vec))
    (with-matrix (m matrix)
      (psetf ox (+ (* m00 vx) (* m01 vy) (* m02 vz) (* m03 1.0))
             oy (+ (* m10 vx) (* m11 vy) (* m12 vz) (* m13 1.0))
             oz (+ (* m20 vx) (* m21 vy) (* m22 vz) (* m23 1.0)))))
  out-vec)

(defun* matrix*vec ((matrix matrix) (vec vec)) (:result vec :inline t :abbrev m*v)
  (matrix*vec! (vec) matrix vec))

(defun* matrix-transpose! ((out-matrix matrix) (matrix matrix)) (:result matrix :inline t :abbrev mtranspose!)
  (with-matrix (o (matrix-copy! out-matrix matrix))
    (rotatef o01 o10)
    (rotatef o02 o20)
    (rotatef o03 o30)
    (rotatef o12 o21)
    (rotatef o13 o31)
    (rotatef o23 o32))
  out-matrix)

(defun* matrix-transpose ((matrix matrix)) (:result matrix :inline t :abbrev mtranspose)
  (matrix-transpose! (matrix-identity) matrix))

(defun* matrix-orthogonal-p ((matrix matrix)) (:result boolean :abbrev morthop)
  (equalp (matrix* matrix (matrix-transpose matrix)) +identity-matrix+))

(defun* matrix-orthogonalize! ((out-matrix matrix) (matrix matrix)) (:result matrix :inline t :abbrev mortho!)
  (let* ((x (matrix-rotation-to-vec matrix :x))
         (y (matrix-rotation-to-vec matrix :y))
         (z (matrix-rotation-to-vec matrix :z)))
    (vec-normalize! x x)
    (vec-normalize! y (vec- y (vec-scale x (vec-dot y x))))
    (vec-cross! z x y)
    (matrix-rotation-from-vec! out-matrix x :x)
    (matrix-rotation-from-vec! out-matrix y :y)
    (matrix-rotation-from-vec! out-matrix z :z))
  out-matrix)

(defun* matrix-orthogonalize ((matrix matrix)) (:result matrix :inline t :abbrev mortho)
  (matrix-orthogonalize! (matrix-identity) matrix))

(defun* matrix-trace ((matrix matrix)) (:result single-float :inline t :abbrev mtrace)
  (with-matrix (m matrix)
    (+ m00 m11 m22 m33)))

(defun* matrix-determinant ((matrix matrix)) (:result single-float :inline t :abbrev mdet)
  (with-matrix (m matrix)
    (- (+ (* m00 m11 m22 m33) (* m00 m12 m23 m31) (* m00 m13 m21 m32)
          (* m01 m10 m23 m32) (* m01 m12 m20 m33) (* m01 m13 m22 m30)
          (* m02 m10 m21 m33) (* m02 m11 m23 m30) (* m02 m13 m20 m31)
          (* m03 m10 m22 m31) (* m03 m11 m20 m32) (* m03 m12 m21 m30))
       (* m00 m11 m23 m32) (* m00 m12 m21 m33) (* m00 m13 m22 m31)
       (* m01 m10 m22 m33) (* m01 m12 m23 m30) (* m01 m13 m20 m32)
       (* m02 m10 m23 m31) (* m02 m11 m20 m33) (* m02 m13 m21 m30)
       (* m03 m10 m21 m32) (* m03 m11 m22 m30) (* m03 m12 m20 m31))))

(defun* matrix-invert-orthogonal! ((out-matrix matrix) (matrix matrix)) (:result matrix :inline t :abbrev minvtortho!)
  (matrix-copy! out-matrix matrix)
  (with-matrix (o out-matrix)
    (rotatef o10 o01)
    (rotatef o20 o02)
    (rotatef o21 o12)
    (psetf o03 (+ (* o00 (- o03)) (* o01 (- o13)) (* o02 (- o23)))
           o13 (+ (* o10 (- o03)) (* o11 (- o13)) (* o12 (- o23)))
           o23 (+ (* o20 (- o03)) (* o21 (- o13)) (* o22 (- o23)))))
  out-matrix)

(defun* matrix-invert-orthogonal ((matrix matrix)) (:result matrix :inline t :abbrev minvtortho)
  (matrix-invert-orthogonal! (matrix-identity) matrix))

(defun* matrix-invert! ((out-matrix matrix) (matrix matrix)) (:result matrix :abbrev minvt!)
  (let ((determinant (matrix-determinant matrix)))
    (when (< (abs determinant) +epsilon+)
      (error "Cannot invert a matrix with a determinant of zero."))
    (with-matrices ((o out-matrix) (m matrix))
      (psetf o00 (/ (- (+ (* m11 m22 m33) (* m12 m23 m31) (* m13 m21 m32))
                       (* m11 m23 m32) (* m12 m21 m33) (* m13 m22 m31))
                    determinant)
             o01 (/ (- (+ (* m01 m23 m32) (* m02 m21 m33) (* m03 m22 m31))
                       (* m01 m22 m33) (* m02 m23 m31) (* m03 m21 m32))
                    determinant)
             o02 (/ (- (+ (* m01 m12 m33) (* m02 m13 m31) (* m03 m11 m32))
                       (* m01 m13 m32) (* m02 m11 m33) (* m03 m12 m31))
                    determinant)
             o03 (/ (- (+ (* m01 m13 m22) (* m02 m11 m23) (* m03 m12 m21))
                       (* m01 m12 m23) (* m02 m13 m21) (* m03 m11 m22))
                    determinant)
             o10 (/ (- (+ (* m10 m23 m32) (* m12 m20 m33) (* m13 m22 m30))
                       (* m10 m22 m33) (* m12 m23 m30) (* m13 m20 m32))
                    determinant)
             o11 (/ (- (+ (* m00 m22 m33) (* m02 m23 m30) (* m03 m20 m32))
                       (* m00 m23 m32) (* m02 m20 m33) (* m03 m22 m30))
                    determinant)
             o12 (/ (- (+ (* m00 m13 m32) (* m02 m10 m33) (* m03 m12 m30))
                       (* m00 m12 m33) (* m02 m13 m30) (* m03 m10 m32))
                    determinant)
             o13 (/ (- (+ (* m00 m12 m23) (* m02 m13 m20) (* m03 m10 m22))
                       (* m00 m13 m22) (* m02 m10 m23) (* m03 m12 m20))
                    determinant)
             o20 (/ (- (+ (* m10 m21 m33) (* m11 m23 m30) (* m13 m20 m31))
                       (* m10 m23 m31) (* m11 m20 m33) (* m13 m21 m30))
                    determinant)
             o21 (/ (- (+ (* m00 m23 m31) (* m01 m20 m33) (* m03 m21 m30))
                       (* m00 m21 m33) (* m01 m23 m30) (* m03 m20 m31))
                    determinant)
             o22 (/ (- (+ (* m00 m11 m33) (* m01 m13 m30) (* m03 m10 m31))
                       (* m00 m13 m31) (* m01 m10 m33) (* m03 m11 m30))
                    determinant)
             o23 (/ (- (+ (* m00 m13 m21) (* m01 m10 m23) (* m03 m11 m20))
                       (* m00 m11 m23) (* m01 m13 m20) (* m03 m10 m21))
                    determinant)
             o30 (/ (- (+ (* m10 m22 m31) (* m11 m20 m32) (* m12 m21 m30))
                       (* m10 m21 m32) (* m11 m22 m30) (* m12 m20 m31))
                    determinant)
             o31 (/ (- (+ (* m00 m21 m32) (* m01 m22 m30) (* m02 m20 m31))
                       (* m00 m22 m31) (* m01 m20 m32) (* m02 m21 m30))
                    determinant)
             o32 (/ (- (+ (* m00 m12 m31) (* m01 m10 m32) (* m02 m11 m30))
                       (* m00 m11 m32) (* m01 m12 m30) (* m02 m10 m31))
                    determinant)
             o33 (/ (- (+ (* m00 m11 m22) (* m01 m12 m20) (* m02 m10 m21))
                       (* m00 m12 m21) (* m01 m10 m22) (* m02 m11 m20))
                    determinant))))
  out-matrix)

(defun* matrix-invert ((matrix matrix)) (:result matrix :abbrev minvt)
  (matrix-invert! (matrix-identity) matrix))

(defun* make-view-matrix! ((out-matrix matrix) (eye vec) (target vec) (up vec))
    (:result matrix :inline t :abbrev mkview!)
  (let ((f (vec))
        (s (vec))
        (u (vec))
        (inv-eye (vec))
        (translation (mid)))
    (with-matrix (o (matrix-identity! out-matrix))
      (with-vectors ((f (vec-normalize! f (vec-! f target eye)))
                     (s (vec-normalize! s (vec-cross! s f up)))
                     (u (vec-cross! u s f)))
        (psetf o00 sx o01 ux o02 (- fx)
               o10 sy o11 uy o12 (- fy)
               o20 sz o21 uz o22 (- fz))
        (matrix-translation-from-vec! translation (vec-negate! inv-eye eye))
        (matrix*! out-matrix translation out-matrix))))
  out-matrix)

(defun* make-view-matrix ((eye vec) (target vec) (up vec)) (:result matrix :inline t :abbrev mkview)
  (make-view-matrix! (matrix-identity) eye target up))

(defun* make-orthographic-matrix! ((out-matrix matrix) (left real) (right real) (bottom real) (top real) (near real)
                                   (far real))
    (:result matrix :inline t :abbrev mkortho!)
  (let ((right-left (float (- right left) 1.0))
        (top-bottom (float (- top bottom) 1.0))
        (far-near (float (- far near) 1.0)))
    (with-matrix (m (matrix-identity! out-matrix))
      (psetf m00 (/ 2.0 right-left)
             m03 (- (/ (+ right left) right-left))
             m11 (/ 2.0 top-bottom)
             m13 (- (/ (+ top bottom) top-bottom))
             m22 (/ -2.0 far-near)
             m23 (- (/ (+ far near) far-near))))
    out-matrix))

(defun* make-orthographic-matrix ((left real) (right real) (bottom real) (top real) (near real) (far real))
    (:result matrix :inline t :abbrev mkortho)
  (make-orthographic-matrix! (matrix-identity) left right bottom top near far))

(defun* make-perspective-matrix! ((out-matrix matrix) (fov real) (aspect real) (near real) (far real))
    (:result matrix :inline t :abbrev mkpersp!)
  (let ((f (float (/ (tan (/ fov 2))) 1.0))
        (z (float (- near far) 1.0)))
    (with-matrix (m (matrix-identity! out-matrix))
      (psetf m00 (/ f aspect)
             m11 f
             m22 (/ (+ near far) z)
             m23 (/ (* 2 near far) z)
             m32 -1.0)))
  out-matrix)

(defun* make-perspective-matrix ((fov real) (aspect real) (near real) (far real))
    (:result matrix :inline t :abbrev mkpersp)
  (make-perspective-matrix! (matrix-identity) fov aspect near far))
