(in-package :gamebox-math)

(eval-when (:compile-toplevel :load-toplevel)
  (defun* (qid! -> quat) ((quat quat))
    (with-quat ((q quat))
      (psetf q.w 1.0f0 q.x 0.0f0 q.y 0.0f0 q.z 0.0f0))
    quat)

  (defun* (qid -> quat) ()
    (qid! (q 0 0 0 0)))

  (define-constant +qid+ (qid) :test #'equalp))

(declaim (inline qzero!))
(defun* (qzero! -> quat) ((quat quat))
  (with-quat ((q quat))
    (psetf q.w 0.0f0 q.x 0.0f0 q.y 0.0f0 q.z 0.0f0))
  quat)

(declaim (inline qzero))
(defun* (qzero -> quat) ()
  (q 0 0 0 0))

(declaim (inline q=))
(defun* (q= -> boolean) ((quat-a quat) (quat-b quat))
  (with-quat ((q1 quat-a) (q2 quat-b))
    (and (= q1.w q2.w)
         (= q1.x q2.x)
         (= q1.y q2.y)
         (= q1.z q2.z))))

(declaim (inline q~))
(defun* (q~ -> boolean) ((quat-a quat) (quat-b quat)
                         &key
                         ((tolerance single-float) +epsilon+))
  (with-quat ((q1 quat-a) (q2 quat-b))
    (and (~ q1.w q2.w tolerance)
         (~ q1.x q2.x tolerance)
         (~ q1.y q2.y tolerance)
         (~ q1.z q2.z tolerance))))

(declaim (inline qcp!))
(defun* (qcp! -> quat) ((out-quat quat) (quat quat))
  (with-quat ((o out-quat) (q quat))
    (psetf o.w q.w o.x q.x o.y q.y o.z q.z))
  out-quat)

(declaim (inline qcp))
(defun* (qcp -> quat) ((quat quat))
  (qcp! (qid) quat))

(declaim (inline q+!))
(defun* (q+! -> quat) ((out-quat quat) (quat-a quat) (quat-b quat))
  (with-quat ((o out-quat) (q1 quat-a) (q2 quat-b))
    (psetf o.w (+ q1.w q2.w)
           o.x (+ q1.x q2.x)
           o.y (+ q1.y q2.y)
           o.z (+ q1.z q2.z)))
  out-quat)

(declaim (inline q+))
(defun* (q+ -> quat) ((quat-a quat) (quat-b quat))
  (q+! (qid) quat-a quat-b))

(declaim (inline q-!))
(defun* (q-! -> quat) ((out-quat quat) (quat-a quat) (quat-b quat))
  (with-quat ((o out-quat) (q1 quat-a) (q2 quat-b))
    (psetf o.w (- q1.w q2.w)
           o.x (- q1.x q2.x)
           o.y (- q1.y q2.y)
           o.z (- q1.z q2.z)))
  out-quat)

(declaim (inline q-))
(defun* (q- -> quat) ((quat-a quat) (quat-b quat))
  (q-! (qid) quat-a quat-b))

(declaim (inline q*!))
(defun* (q*! -> quat) ((out-quat quat) (quat-a quat) (quat-b quat))
  (with-quat ((o out-quat) (q1 quat-a) (q2 quat-b))
    (psetf o.w (- (* q1.w q2.w) (* q1.x q2.x) (* q1.y q2.y) (* q1.z q2.z))
           o.x (- (+ (* q1.w q2.x) (* q1.x q2.w) (* q1.y q2.z)) (* q1.z q2.y))
           o.y (- (+ (* q1.w q2.y) (* q1.y q2.w) (* q1.z q2.x)) (* q1.x q2.z))
           o.z (- (+ (* q1.w q2.z) (* q1.z q2.w) (* q1.x q2.y)) (* q1.y q2.x))))
  out-quat)

(declaim (inline q*))
(defun* (q* -> quat) ((quat-a quat) (quat-b quat))
  (q*! (qid) quat-a quat-b))

(declaim (inline qscale!))
(defun* (qscale! -> quat) ((out-quat quat) (quat quat) (scalar single-float))
  (with-quat ((o out-quat) (q quat))
    (psetf o.w (* q.w scalar)
           o.x (* q.x scalar)
           o.y (* q.y scalar)
           o.z (* q.z scalar)))
  out-quat)

(declaim (inline qscale))
(defun* (qscale -> quat) ((quat quat) (scalar single-float))
  (qscale! (qid) quat scalar))

(declaim (inline qconj!))
(defun* (qconj! -> quat) ((out-quat quat) (quat quat))
  (with-quat ((o out-quat) (q quat))
    (psetf o.w q.w
           o.x (- q.x)
           o.y (- q.y)
           o.z (- q.z)))
  out-quat)

(declaim (inline qconj))
(defun* (qconj -> quat) ((quat quat))
  (qconj! (qid) quat))

(declaim (inline qcross!))
(defun* (qcross! -> quat) ((out-quat quat) (quat-a quat) (quat-b quat))
  (qscale!
   out-quat
   (q+ (q* quat-b (qconj quat-a))
       (q* quat-a quat-b))
   0.5f0))

(declaim (inline qcross))
(defun* (qcross -> quat) ((quat-a quat) (quat-b quat))
  (qcross! (qid) quat-a quat-b))

(declaim (inline qmagsq))
(defun* (qmagsq -> single-float) ((quat quat))
  (with-quat ((q quat))
    (+ (* q.w q.w) (* q.x q.x) (* q.y q.y) (* q.z q.z))))

(declaim (inline qmag))
(defun* (qmag -> single-float) ((quat quat))
  (sqrt (qmagsq quat)))

(declaim (inline qnormalize!))
(defun* (qnormalize! -> quat) ((out-quat quat) (quat quat))
  (let ((magnitude (qmag quat)))
    (unless (zerop magnitude)
      (qscale! out-quat quat (/ magnitude))))
  out-quat)

(declaim (inline qnormalize))
(defun* (qnormalize -> quat) ((quat quat))
  (qnormalize! (qid) quat))

(declaim (inline qneg!))
(defun* (qneg! -> quat) ((out-quat quat) (quat quat))
  (qscale! out-quat quat -1.0f0))

(declaim (inline qneg))
(defun* (qneg -> quat) ((quat quat))
  (qneg! (qid) quat))

(declaim (inline qdot))
(defun* (qdot -> single-float) ((quat-a quat) (quat-b quat))
  (with-quat ((q1 quat-a) (q2 quat-b))
    (+ (* q1.w q2.w)
       (* q1.x q2.x)
       (* q1.y q2.y)
       (* q1.z q2.z))))

(declaim (inline qinv!))
(defun* (qinv! -> quat) ((out-quat quat) (quat quat))
  (qconj! out-quat quat)
  (qscale! out-quat out-quat (/ (qmagsq quat)))
  out-quat)

(declaim (inline qinv))
(defun* (qinv -> quat) ((quat quat))
  (qinv! (qid) quat))

(declaim (inline qrot!))
(defun* (qrot! -> quat) ((out-quat quat) (quat quat) (vec vec3))
  (with-quat ((o out-quat) (q (qcp quat)))
    (with-vec3 ((v (v3scale vec 0.5f0))
                (c (v3 (cos v.x) (cos v.y) (cos v.z)))
                (s (v3 (sin v.x) (sin v.y) (sin v.z))))
      (psetf o.w (- (* c.x c.y c.z) (* s.x s.y s.z))
             o.x (+ (* s.x c.y c.z) (* c.x s.y s.z))
             o.y (- (* c.x s.y c.z) (* s.x c.y s.z))
             o.z (+ (* s.x s.y c.z) (* c.x c.y s.z)))
      (q*! out-quat out-quat q)))
  out-quat)

(defun* (qrot -> quat) ((quat quat) (vec vec3))
  (qrot! (qid) quat vec))

(declaim (inline q->v3!))
(defun* (q->v3! -> vec3) ((out-vec vec3) (quat quat))
  (with-vec3 ((v out-vec))
    (with-quat ((q quat))
      (setf v.x q.x v.y q.y v.z q.z)))
  out-vec)

(declaim (inline q->v3))
(defun* (q->v3 -> vec3) ((quat quat))
  (q->v3! (v3zero) quat))

(declaim (inline q->v4!))
(defun* (q->v4! -> vec4) ((out-vec vec4) (quat quat))
  (with-vec4 ((v out-vec))
    (with-quat ((q quat))
      (setf v.x q.w v.y q.x v.z q.y v.w q.z)))
  out-vec)

(declaim (inline q->v4))
(defun* (q->v4 -> vec4) ((quat quat))
  (q->v4! (v4zero) quat))

(declaim (inline v3->q!))
(defun* (v3->q! -> quat) ((out-quat quat) (vec vec3))
  (with-quat ((q out-quat))
    (with-vec3 ((v vec))
      (setf q.w 0.0f0 q.x v.x q.y v.y q.z v.z)))
  out-quat)

(declaim (inline v3->q))
(defun* (v3->q -> quat) ((vec vec3))
  (v3->q! (qzero) vec))

(declaim (inline v4->q!))
(defun* (v4->q! -> quat) ((out-quat quat) (vec vec4))
  (with-quat ((q out-quat))
    (with-vec4 ((v vec))
      (setf q.w v.x q.x v.y q.y v.z q.z v.w)))
  out-quat)

(declaim (inline v4->q))
(defun* (v4->q -> quat) ((vec vec4))
  (v4->q! (qzero) vec))

(declaim (inline q->m4!))
(defun* (q->m4! -> mat4) ((out-mat mat4) (quat quat))
  (with-mat4 ((o out-mat))
    (with-quat ((q quat))
      (let* ((s (/ 2 (qmagsq quat)))
             (xs (* q.x s))
             (ys (* q.y s))
             (zs (* q.z s))
             (xx (* q.x xs))
             (xy (* q.x ys))
             (xz (* q.x zs))
             (yy (* q.y ys))
             (yz (* q.y zs))
             (zz (* q.z zs))
             (wx (* q.w xs))
             (wy (* q.w ys))
             (wz (* q.w zs)))
        (psetf o.00 (- 1 (+ yy zz))
               o.01 (- xy wz)
               o.02 (+ xz wy)
               o.03 0.0f0
               o.10 (+ xy wz)
               o.11 (- 1 (+ xx zz))
               o.12 (- yz wx)
               o.13 0.0f0
               o.20 (- xz wy)
               o.21 (+ yz wx)
               o.22 (- 1 (+ xx yy))
               o.23 0.0f0
               o.30 0.0f0
               o.31 0.0f0
               o.32 0.0f0
               o.33 1.0f0))))
  out-mat)

(declaim (inline q->m4))
(defun* (q->m4 -> mat4) ((quat quat))
  (q->m4! (m4id) quat))

(defun* (m4->q! -> quat) ((out-quat quat) (mat mat4))
  (with-quat ((q out-quat))
    (with-mat4 ((m mat))
      (let ((trace (m4trace mat))
            (col1 (1+ (- m.00 m.11 m.22)))
            (col2 (1+ (- m.11 m.00 m.22)))
            (col3 (1+ (- m.22 m.00 m.11)))
            (s 0.0f0))
        (cond
          ((plusp trace)
           (setf s (/ 0.5f0 (sqrt trace))
                 q.w (/ 0.25f0 s)
                 q.x (* (- m.21 m.12) s)
                 q.y (* (- m.02 m.20) s)
                 q.z (* (- m.10 m.01) s)))
          ((and (>= col1 col2) (>= col1 col3))
           (setf s (/ 0.5f0 (sqrt col1))
                 q.w (* (- m.21 m.12) s)
                 q.x (/ 0.25f0 s)
                 q.y (* (+ m.10 m.01) s)
                 q.z (* (+ m.02 m.20) s)))
          ((and (>= col2 col1) (>= col2 col3))
           (setf s (/ 0.5f0 (sqrt col2))
                 q.w (* (- m.02 m.20) s)
                 q.x (* (+ m.01 m.10) s)
                 q.y (/ 0.25f0 s)
                 q.z (* (+ m.12 m.21) s)))
          (t
           (setf s (/ 0.5f0 (sqrt col3))
                 q.w (* (- m.10 m.01) s)
                 q.x (* (+ m.02 m.20) s)
                 q.y (* (+ m.12 m.21) s)
                 q.z (/ 0.25f0 s)))))))
  out-quat)

(declaim (inline m4->q))
(defun* (m4->q -> quat) ((mat mat4))
  (m4->q! (qid) mat))

(defun* (qslerp! -> quat) ((out-quat quat) (quat-a quat) (quat-b quat)
                           (factor single-float))
  (with-quat ((o out-quat) (q1 quat-a) (q2 quat-b))
    (let ((dot (qdot q1 q2))
          (q2 q2))
      (when (minusp dot)
        (qneg! q2 q2)
        (setf dot (- dot)))
      (if (> (abs dot) 0.9995f0)
          (psetf o.w (lerp factor q1.w q2.w)
                 o.x (lerp factor q1.x q2.x)
                 o.y (lerp factor q1.y q2.y)
                 o.z (lerp factor q1.z q2.z))
          (let* ((angle (acos (clamp dot 0 1)))
                 (sin-angle (sin angle))
                 (scale1 (/ (sin (* angle (- 1 factor))) sin-angle))
                 (scale2 (/ (sin (* factor angle)) sin-angle)))
            (psetf o.w (+ (* q1.w scale1) (* q2.w scale2))
                   o.x (+ (* q1.x scale1) (* q2.x scale2))
                   o.y (+ (* q1.y scale1) (* q2.y scale2))
                   o.z (+ (* q1.z scale1) (* q2.z scale2)))))))
  out-quat)

(declaim (inline qslerp))
(defun* (qslerp -> quat) ((quat-a quat) (quat-b quat) (factor single-float))
  (qslerp! (qid) quat-a quat-b factor))
