(in-package #:coherent-noise/internal)

(u:fn-> %cylinders (u:f32 f50 f50) u:f32)
(defun %cylinders (frequency x z)
  (declare (optimize speed))
  (let* ((x (* x frequency))
         (z (* z frequency))
         (distance-center (the f50 (sqrt (+ (* x x) (* z z)))))
         (distance-small (- distance-center (floor distance-center)))
         (distance-large (- 1 distance-small))
         (nearest (min distance-small distance-large)))
    (float (- 1.0 (* nearest 4.0)) 1f0)))

(u:fn-> %spheres (u:f32 f50 f50 f50) u:f32)
(defun %spheres (frequency x y z)
  (declare (optimize speed))
  (let* ((x (* x frequency))
         (y (* y frequency))
         (z (* z frequency))
         (distance-center (the f50 (sqrt (+ (* x x) (* y y) (* z z)))))
         (distance-small (- distance-center (floor distance-center)))
         (distance-large (- 1 distance-small))
         (nearest (min distance-small distance-large)))
    (float (- 1.0 (* nearest 4.0)) 1f0)))

(u:fn-> %checkered (f50 f50 f50) u:f32)
(defun %checkered (x y z)
  (declare (optimize speed))
  (if (zerop (logxor (logand (floor x) 1) (logand (floor y) 1) (logand (floor z) 1)))
      1.0
      -1.0))
