(in-package #:coherent-noise/internal)

;;; 1D Simplex

(u:define-constant +simplex-1d/scale+ 0.395d0)

(u:fn-> %simplex-1d (ub8-512 f50) u:f32)
(declaim (inline %simplex-1d))
(defun %simplex-1d (table x)
  (declare (optimize speed))
  (flet ((noise (hash x)
           (let* ((s (- 1 (* x x)))
                  (h (logand hash 15))
                  (grad (if (zerop (logand h 8))
                            (* (1+ (logand h 7)) x)
                            (* (- (1+ (logand h 7))) x))))
             (if (plusp s)
                 (* (expt s 4) grad)
                 0d0))))
    (let* ((i1 (floor x))
           (i2 (1+ i1))
           (x1 (- x i1))
           (x2 (1- x1)))
      (float (* (+ (noise (lookup table i1) x1)
                   (noise (lookup table i2) x2))
                +simplex-1d/scale+)
             1f0))))

;;; 2D Simplex

(u:define-constant +simplex-2d/skew-factor+ (/ (1- (sqrt 3d0)) 2))

(u:define-constant +simplex-2d/unskew-factor+ (/ (- 3 (sqrt 3d0)) 6))

(u:define-constant +simplex-2d/scale+ 45.23065d0)

(u:fn-> %simplex-2d (ub8-512 f50 f50) u:f32)
(declaim (inline %simplex-2d))
(defun %simplex-2d (table x y)
  (declare (optimize speed))
  (flet ((get-simplex (x y)
           (if (> x y)
               (values 1 0)
               (values 0 1)))
         (noise (hash x y)
           (let* ((s (- 0.5 (* x x) (* y y)))
                  (h (logand hash 7))
                  (u (if (< h 4) x y))
                  (v (if (< h 4) y x))
                  (grad (+ (if (zerop (logand h 1)) u (- u))
                           (if (zerop (logand h 2)) (* v 2) (* v -2)))))
             (if (plusp s)
                 (* (expt s 4) grad)
                 0d0))))
    (u:mvlet* ((s (* (+ x y) +simplex-2d/skew-factor+))
               (i (floor (+ x s)))
               (j (floor (+ y s)))
               (tx (* (+ i j) +simplex-2d/unskew-factor+))
               (x1 (- x (- i tx)))
               (y1 (- y (- j tx)))
               (i1 j1 (get-simplex x1 y1))
               (x2 (+ (- x1 i1) +simplex-2d/unskew-factor+))
               (y2 (+ (- y1 j1) +simplex-2d/unskew-factor+))
               (x3 (+ (1- x1) #.(* +simplex-2d/unskew-factor+ 2)))
               (y3 (+ (1- y1) #.(* +simplex-2d/unskew-factor+ 2))))
      (float (* (+ (noise (lookup table i j) x1 y1)
                   (noise (lookup table (+ i i1) (+ j j1)) x2 y2)
                   (noise (lookup table (1+ i) (1+ j)) x3 y3))
                +simplex-2d/scale+)
             1f0))))

;;; 3D Simplex

(u:define-constant +simplex-3d/skew-factor+ (/ 3d0))

(u:define-constant +simplex-3d/unskew-factor+ (/ 6d0))

(u:define-constant +simplex-3d/scale+ 32d0)

(u:fn-> %simplex-3d (ub8-512 f50 f50 f50) u:f32)
(declaim (inline %simplex-3d))
(defun %simplex-3d (table x y z)
  (declare (optimize speed))
  (flet ((get-simplex (x y z)
           (if (>= x y)
               (cond
                 ((>= y z) (values 1 0 0 1 1 0))
                 ((>= x z) (values 1 0 0 1 0 1))
                 (t (values 0 0 1 1 0 1)))
               (cond
                 ((< y z) (values 0 0 1 0 1 1))
                 ((< x z) (values 0 1 0 0 1 1))
                 (t (values 0 1 0 1 1 0)))))
         (noise (hash x y z)
           (let* ((s (- 0.6 (* x x) (* y y) (* z z)))
                  (h (logand hash 15))
                  (u (if (< h 8) x y))
                  (v (case h
                       ((0 1 2 3) y)
                       ((12 14) x)
                       (t z)))
                  (grad (+ (if (zerop (logand h 1)) u (- u))
                           (if (zerop (logand h 2)) v (- v)))))
             (if (plusp s)
                 (* (expt s 4) grad)
                 0d0))))
    (u:mvlet* ((s (* (+ x y z) +simplex-3d/skew-factor+))
               (i (floor (+ x s)))
               (j (floor (+ y s)))
               (k (floor (+ z s)))
               (tx (* (+ i j k) +simplex-3d/unskew-factor+))
               (x1 (- x (- i tx)))
               (y1 (- y (- j tx)))
               (z1 (- z (- k tx)))
               (i1 j1 k1 i2 j2 k2 (get-simplex x1 y1 z1))
               (x2 (+ (- x1 i1) +simplex-3d/unskew-factor+))
               (y2 (+ (- y1 j1) +simplex-3d/unskew-factor+))
               (z2 (+ (- z1 k1) +simplex-3d/unskew-factor+))
               (x3 (+ (- x1 i2) #.(* +simplex-3d/unskew-factor+ 2)))
               (y3 (+ (- y1 j2) #.(* +simplex-3d/unskew-factor+ 2)))
               (z3 (+ (- z1 k2) #.(* +simplex-3d/unskew-factor+ 2)))
               (x4 (+ (1- x1) #.(* +simplex-3d/unskew-factor+ 3)))
               (y4 (+ (1- y1) #.(* +simplex-3d/unskew-factor+ 3)))
               (z4 (+ (1- z1) #.(* +simplex-3d/unskew-factor+ 3))))
      (float (* (+ (noise (lookup table i j k) x1 y1 z1)
                   (noise (lookup table (+ i i1) (+ j j1) (+ k k1)) x2 y2 z2)
                   (noise (lookup table (+ i i2)  (+ j j2) (+ k k2)) x3 y3 z3)
                   (noise (lookup table (1+ i) (1+ j) (1+ k)) x4 y4 z4))
                +simplex-3d/scale+)
             1f0))))

;;; 4D Simplex

(u:define-constant +simplex-4d/skew-factor+ (/ (1- (sqrt 5d0)) 4))

(u:define-constant +simplex-4d/unskew-factor+ (/ (- 5 (sqrt 5d0)) 20))

(u:define-constant +simplex-4d/scale+ 27d0)

(u:define-constant +simplex-4d/table+
    (make-array 256
                :element-type 'u:ub8
                :initial-contents
                '(0 1 2 3 0 1 3 2 0 0 0 0 0 2 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 0 0 2 1 3 0 0 0 0 0 3
                  1 2 0 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 1 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                  0 0 0 0 0 0 0 0 0 0 0 0 1 2 0 3 0 0 0 0 1 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 2 3
                  1 0 1 0 2 3 1 0 3 2 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 1 0 0 0 0 2 1 3 0 0 0 0 0 0 0 0 0
                  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 1 3 0 0 0 0 0 0 0 0 0 0 0 0 3 0
                  1 2 3 0 2 1 0 0 0 0 3 1 2 0 2 1 0 3 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 2 0 0 0 0 3 2 0 1
                  3 2 1 0))
  :test #'equalp)

(u:fn-> %simplex-4d (ub8-512 f50 f50 f50 f50) u:f32)
(declaim (inline %simplex-4d))
(defun %simplex-4d (table x y z w)
  (declare (optimize speed))
  (flet ((get-simplex (x y z w)
           (let* ((c1 (if (> x y) 32 0))
                  (c2 (if (> x z) 16 0))
                  (c3 (if (> y z) 8 0))
                  (c4 (if (> x w) 4 0))
                  (c5 (if (> y w) 2 0))
                  (c6 (if (> z w) 1 0))
                  (c (* 4 (+ c1 c2 c3 c4 c5 c6)))
                  (a0 (aref +simplex-4d/table+ (+ c 0)))
                  (a1 (aref +simplex-4d/table+ (+ c 1)))
                  (a2 (aref +simplex-4d/table+ (+ c 2)))
                  (a3 (aref +simplex-4d/table+ (+ c 3))))
             (values (if (>= a0 3) 1 0)
                     (if (>= a1 3) 1 0)
                     (if (>= a2 3) 1 0)
                     (if (>= a3 3) 1 0)
                     (if (>= a0 2) 1 0)
                     (if (>= a1 2) 1 0)
                     (if (>= a2 2) 1 0)
                     (if (>= a3 2) 1 0)
                     (if (>= a0 1) 1 0)
                     (if (>= a1 1) 1 0)
                     (if (>= a2 1) 1 0)
                     (if (>= a3 1) 1 0))))
         (noise (hash x y z w)
           (let* ((s (- 0.6 (* x x) (* y y) (* z z) (* w w)))
                  (h (logand hash 31))
                  (u (if (< h 24) x y))
                  (v (if (< h 16) y z))
                  (w (if (< h 8) z w))
                  (grad (+ (if (zerop (logand h 1)) u (- u))
                           (if (zerop (logand h 2)) v (- v))
                           (if (zerop (logand h 4)) w (- w)))))
             (if (plusp s)
                 (* (expt s 4) grad)
                 0d0))))
    (u:mvlet* ((s (* (+ x y z w) +simplex-4d/skew-factor+))
               (i (floor (+ x s)))
               (j (floor (+ y s)))
               (k (floor (+ z s)))
               (l (floor (+ w s)))
               (tx (* (+ i j k l) +simplex-4d/unskew-factor+))
               (x1 (- x (- i tx)))
               (y1 (- y (- j tx)))
               (z1 (- z (- k tx)))
               (w1 (- w (- l tx)))
               (i1 j1 k1 l1 i2 j2 k2 l2 i3 j3 k3 l3 (get-simplex x1 y1 z1 w1))
               (x2 (+ (- x1 i1) +simplex-4d/unskew-factor+))
               (y2 (+ (- y1 j1) +simplex-4d/unskew-factor+))
               (z2 (+ (- z1 k1) +simplex-4d/unskew-factor+))
               (w2 (+ (- w1 l1) +simplex-4d/unskew-factor+))
               (x3 (+ (- x1 i2) #.(* +simplex-4d/unskew-factor+ 2)))
               (y3 (+ (- y1 j2) #.(* +simplex-4d/unskew-factor+ 2)))
               (z3 (+ (- z1 k2) #.(* +simplex-4d/unskew-factor+ 2)))
               (w3 (+ (- w1 l2) #.(* +simplex-4d/unskew-factor+ 2)))
               (x4 (+ (- x1 i3) #.(* +simplex-4d/unskew-factor+ 3)))
               (y4 (+ (- y1 j3) #.(* +simplex-4d/unskew-factor+ 3)))
               (z4 (+ (- z1 k3) #.(* +simplex-4d/unskew-factor+ 3)))
               (w4 (+ (- w1 l3) #.(* +simplex-4d/unskew-factor+ 3)))
               (x5 (+ (1- x1) #.(* +simplex-4d/unskew-factor+ 4)))
               (y5 (+ (1- y1) #.(* +simplex-4d/unskew-factor+ 4)))
               (z5 (+ (1- z1) #.(* +simplex-4d/unskew-factor+ 4)))
               (w5 (+ (1- w1) #.(* +simplex-4d/unskew-factor+ 4))))
      (float (* (+ (noise (lookup table i j k l) x1 y1 z1 w1)
                   (noise (lookup table (+ i i1) (+ j j1) (+ k k1) (+ l l1)) x2 y2 z2 w2)
                   (noise (lookup table (+ i i2) (+ j j2) (+ k k2) (+ l l2)) x3 y3 z3 w3)
                   (noise (lookup table (+ i i3) (+ j j3) (+ k k3) (+ l l3)) x4 y4 z4 w4)
                   (noise (lookup table (1+ i) (1+ j) (1+ k) (1+ l)) x5 y5 z5 w5))
                +simplex-4d/scale+)
             1f0))))
