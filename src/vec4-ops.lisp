(in-package :gamebox-math)

(declaim (inline v4zero!))
(defun* (v4zero! -> vec4) ((vec vec4))
  (with-vec4 ((v vec))
    (psetf v.x 0.0f0 v.y 0.0f0 v.z 0.0 v.w 0.0f0))
  vec)

(declaim (inline v4zero))
(defun* (v4zero -> vec4) ()
  (vec4 0 0 0 0))

(declaim (inline v4cp!))
(defun* (v4cp! -> vec4) ((out-vec vec4) (vec vec4))
  (with-vec4 ((o out-vec) (v vec))
    (psetf o.x v.x o.y v.y o.z v.z o.w v.w))
  out-vec)

(declaim (inline v4cp))
(defun* (v4cp -> vec4) ((vec vec4))
  (v4cp! (v4zero) vec))

(declaim (inline v4clamp!))
(defun* (v4clamp! -> vec4) ((out-vec vec4) (vec vec4)
                            &key
                            ((min single-float) most-negative-single-float)
                            ((max single-float) most-positive-single-float))
  (with-vec4 ((o out-vec) (v vec))
    (psetf o.x (clamp v.x min max)
           o.y (clamp v.y min max)
           o.z (clamp v.z min max)
           o.w (clamp v.w min max)))
  out-vec)

(declaim (inline v4clamp))
(defun* (v4clamp -> vec4) ((vec vec4)
                           &key
                           ((min single-float) most-negative-single-float)
                           ((max single-float) most-positive-single-float))
  (v4clamp! (v4zero) vec :min min :max max))

(declaim (inline v4stab!))
(defun* (v4stab! -> vec4) ((out-vec vec4) (vec vec4)
                           &key
                           ((tolerance single-float) +epsilon+))
  (with-vec4 ((o out-vec) (v vec))
    (macrolet ((stabilize (place)
                 `(if (< (abs ,place) tolerance) 0.0f0 ,place)))
      (psetf o.x (stabilize v.x)
             o.y (stabilize v.y)
             o.z (stabilize v.z)
             o.w (stabilize v.w))))
  out-vec)

(declaim (inline v4stab))
(defun* (v4stab -> vec4) ((vec vec4) &key ((tolerance single-float) +epsilon+))
  (v4stab! (v4zero) vec :tolerance tolerance))

(declaim (inline v4->list))
(defun* (v4->list -> list) ((vec vec4))
  (with-vec4 ((v vec))
    (list v.x v.y v.z v.w)))

(declaim (inline list->v4))
(defun* (list->v4 -> vec4) ((list list))
  (apply #'vec4 list))

(declaim (inline v4=))
(defun* (v4= -> boolean) ((vec-a vec4) (vec-b vec4))
  (with-vec4 ((v1 vec-a) (v2 vec-b))
    (and (= v1.x v2.x)
         (= v1.y v2.y)
         (= v1.z v2.z)
         (= v1.w v2.w))))

(declaim (inline v4~))
(defun* (v4~ -> boolean) ((vec-a vec4) (vec-b vec4)
                          &key
                          ((tolerance single-float) +epsilon+))
  (with-vec4 ((v1 vec-a) (v2 vec-b))
    (and (~ v1.x v2.x tolerance)
         (~ v1.y v2.y tolerance)
         (~ v1.z v2.z tolerance)
         (~ v1.w v2.w tolerance))))

(declaim (inline v4+!))
(defun* (v4+! -> vec4) ((out-vec vec4) (vec-a vec4) (vec-b vec4))
  (with-vec4 ((o out-vec) (v1 vec-a) (v2 vec-b))
    (psetf o.x (+ v1.x v2.x)
           o.y (+ v1.y v2.y)
           o.z (+ v1.z v2.z)
           o.w (+ v1.w v2.w)))
  out-vec)

(declaim (inline v4+))
(defun* (v4+ -> vec4) ((vec-a vec4) (vec-b vec4))
  (v4+! (v4zero) vec-a vec-b))

(declaim (inline v4-))
(defun* (v4-! -> vec4) ((out-vec vec4) (vec-a vec4) (vec-b vec4))
  (with-vec4 ((o out-vec) (v1 vec-a) (v2 vec-b))
    (psetf o.x (- v1.x v2.x)
           o.y (- v1.y v2.y)
           o.z (- v1.z v2.z)
           o.w (- v1.w v2.w)))
  out-vec)

(declaim (inline v4-))
(defun* (v4- -> vec4) ((vec-a vec4) (vec-b vec4))
  (v4-! (v4zero) vec-a vec-b))

(declaim (inline v4had*!))
(defun* (v4had*! -> vec4) ((out-vec vec4) (vec-a vec4) (vec-b vec4))
  (with-vec4 ((o out-vec) (v1 vec-a) (v2 vec-b))
    (psetf o.x (* v1.x v2.x)
           o.y (* v1.y v2.y)
           o.z (* v1.z v2.z)
           o.w (* v1.w v2.w)))
  out-vec)

(declaim (inline v4had*))
(defun* (v4had* -> vec4) ((vec-a vec4) (vec-b vec4))
  (v4had*! (v4zero) vec-a vec-b))

(declaim (inline v4had/!))
(defun* (v4had/! -> vec4) ((out-vec vec4) (vec-a vec4) (vec-b vec4))
  (with-vec4 ((o out-vec) (v1 vec-a) (v2 vec-b))
    (psetf o.x (if (zerop v2.x) 0.0f0 (/ v1.x v2.x))
           o.y (if (zerop v2.y) 0.0f0 (/ v1.y v2.y))
           o.z (if (zerop v2.z) 0.0f0 (/ v1.z v2.z))
           o.w (if (zerop v2.w) 0.0f0 (/ v1.w v2.w))))
  out-vec)

(declaim (inline v4had/))
(defun* (v4had/ -> vec4) ((vec-a vec4) (vec-b vec4))
  (v4had/! (v4zero) vec-a vec-b))

(declaim (inline v4scale!))
(defun* (v4scale! -> vec4) ((out-vec vec4) (vec vec4) (scalar single-float))
  (with-vec4 ((o out-vec) (v vec))
    (psetf o.x (* v.x scalar)
           o.y (* v.y scalar)
           o.z (* v.z scalar)
           o.w (* v.w scalar)))
  out-vec)

(declaim (inline v4scale))
(defun* (v4scale -> vec4) ((vec vec4) (scalar single-float))
  (v4scale! (v4zero) vec scalar))

(declaim (inline v4dot))
(defun* (v4dot -> single-float) ((vec-a vec4) (vec-b vec4))
  (with-vec4 ((v1 vec-a) (v2 vec-b))
    (+ (* v1.x v2.x) (* v1.y v2.y) (* v1.z v2.z) (* v1.w v2.w))))

(declaim (inline v4magsq))
(defun* (v4magsq -> single-float) ((vec vec4))
  (v4dot vec vec))

(declaim (inline v4mag))
(defun* (v4mag -> single-float) ((vec vec4))
  (sqrt (v4magsq vec)))

(declaim (inline v4normalize!))
(defun* (v4normalize! -> vec4) ((out-vec vec4) (vec vec4))
  (let ((magnitude (v4mag vec)))
    (unless (zerop magnitude)
      (v4scale! out-vec vec (/ magnitude))))
  out-vec)

(declaim (inline v4normalize))
(defun* (v4normalize -> vec4) ((vec vec4))
  (v4normalize! (v4zero) vec))

(declaim (inline v4round!))
(defun* (v4round! -> vec4) ((out-vec vec4) (vec vec4))
  (with-vec4 ((o out-vec) (v vec))
    (psetf o.x (fround v.x)
           o.y (fround v.y)
           o.z (fround v.z)
           o.w (fround v.w)))
  out-vec)

(declaim (inline v4round))
(defun* (v4round -> vec4) ((vec vec4))
  (v4round! (v4zero) vec))

(declaim (inline v4abs!))
(defun* (v4abs! -> vec4) ((out-vec vec4) (vec vec4))
  (with-vec4 ((o out-vec) (v vec))
    (psetf o.x (abs v.x)
           o.y (abs v.y)
           o.z (abs v.z)
           o.w (abs v.w)))
  out-vec)

(declaim (inline v4abs))
(defun* (v4abs -> vec4) ((vec vec4))
  (v4abs! (v4zero) vec))

(declaim (inline v4neg!))
(defun* (v4neg! -> vec4) ((out-vec vec4) (vec vec4))
  (v4scale! out-vec vec -1.0f0))

(declaim (inline v4neg))
(defun* (v4neg -> vec4) ((vec vec4))
  (v4neg! (v4zero) vec))

(declaim (inline v4zerop))
(defun* (v4zerop -> boolean) ((vec vec4))
  (with-vec4 ((v vec))
    (and (zerop v.x)
         (zerop v.y)
         (zerop v.z)
         (zerop v.w))))

(declaim (inline v4lerp!))
(defun* (v4lerp! -> vec4) ((out-vec vec4) (vec-a vec4) (vec-b vec4)
                           (factor single-float))
  (with-vec4 ((o out-vec) (v1 vec-a) (v2 vec-b))
    (psetf o.x (lerp factor v1.x v2.x)
           o.y (lerp factor v1.y v2.y)
           o.z (lerp factor v1.z v2.z)
           o.w (lerp factor v1.w v2.w)))
  out-vec)

(declaim (inline v4lerp))
(defun* (v4lerp -> vec4) ((vec-a vec4) (vec-b vec4) (factor single-float))
  (v4lerp! (v4zero) vec-a vec-b factor))

(declaim (inline v4<))
(defun* (v4< -> boolean) ((vec-a vec4) (vec-b vec4))
  (with-vec4 ((v1 vec-a) (v2 vec-b))
    (and (< v1.x v2.x)
         (< v1.y v2.y)
         (< v1.z v2.z)
         (< v1.w v2.w))))

(declaim (inline v4<=))
(defun* (v4<= -> boolean) ((vec-a vec4) (vec-b vec4))
  (with-vec4 ((v1 vec-a) (v2 vec-b))
    (and (<= v1.x v2.x)
         (<= v1.y v2.y)
         (<= v1.z v2.z)
         (<= v1.w v2.w))))

(declaim (inline v4>))
(defun* (v4> -> boolean) ((vec-a vec4) (vec-b vec4))
  (with-vec4 ((v1 vec-a) (v2 vec-b))
    (and (> v1.x v2.x)
         (> v1.y v2.y)
         (> v1.z v2.z)
         (> v1.w v2.w))))

(declaim (inline v4>=))
(defun* (v4>= -> boolean) ((vec-a vec4) (vec-b vec4))
  (with-vec4 ((v1 vec-a) (v2 vec-b))
    (and (>= v1.x v2.x)
         (>= v1.y v2.y)
         (>= v1.z v2.z)
         (>= v1.w v2.w))))

(declaim (inline v4min!))
(defun* (v4min! -> vec4) ((out-vec vec4) (vec-a vec4) (vec-b vec4))
  (with-vec4 ((o out-vec) (v1 vec-a) (v2 vec-b))
    (psetf o.x (min v1.x v2.x)
           o.y (min v1.y v2.y)
           o.z (min v1.z v2.z)
           o.w (min v1.w v2.w)))
  out-vec)

(declaim (inline v4min))
(defun* (v4min -> vec4) ((vec-a vec4) (vec-b vec4))
  (v4min! (v4zero) vec-a vec-b))

(declaim (inline v4max!))
(defun* (v4max! -> vec4) ((out-vec vec4) (vec-a vec4) (vec-b vec4))
  (with-vec4 ((o out-vec) (v1 vec-a) (v2 vec-b))
    (psetf o.x (max v1.x v2.x)
           o.y (max v1.y v2.y)
           o.z (max v1.z v2.z)
           o.w (max v1.w v2.w)))
  out-vec)

(declaim (inline v4max))
(defun* (v4max -> vec4) ((vec-a vec4) (vec-b vec4))
  (v4max! (v4zero) vec-a vec-b))
