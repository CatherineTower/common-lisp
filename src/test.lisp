(in-package #:coherent-noise.internal)

;;; 2D OpenSimplex2F

(u:define-constant +open-simplex2-fast-2d/gradients+
    (let ((gradients #(#(13.031324456287654d0 98.98273633310245d0)
                       #(38.20591014244875d0 92.23722642870753d0)
                       #(60.77682619065379d0 79.20590197241988d0)
                       #(79.20590197241988d0 60.77682619065379d0)
                       #(92.23722642870753d0 38.20591014244875d0)
                       #(98.98273633310245d0 13.031324456287555d0)
                       #(98.98273633310245d0 -13.031324456287555d0)
                       #(92.23722642870753d0 -38.20591014244875d0)
                       #(79.20590197241988d0 -60.776826190653686d0)
                       #(60.77682619065379d0 -79.20590197241988d0)
                       #(38.20591014244875d0 -92.23722642870753d0)
                       #(13.031324456287654d0 -98.98273633310245d0)
                       #(-13.031324456287654d0 -98.98273633310245d0)
                       #(-38.20591014244875d0 -92.23722642870753d0)
                       #(-60.77682619065379d0 -79.20590197241988d0)
                       #(-79.20590197241988d0 -60.77682619065379d0)
                       #(-92.23722642870753d0 -38.20591014244875d0)
                       #(-98.98273633310245d0 -13.031324456287654d0)
                       #(-98.98273633310245d0 13.031324456287555d0)
                       #(-92.23722642870753d0 38.20591014244875d0)
                       #(-79.20590197241988d0 60.77682619065379d0)
                       #(-60.77682619065379d0 79.20590197241988d0)
                       #(-38.20591014244875d0 92.23722642870753d0)
                       #(-13.031324456287654d0 98.98273633310245d0)))
          (table (make-array 4096 :element-type 'u:f64)))
      (dotimes (i 2048)
        (setf (aref table (ash i 1)) (aref (aref gradients (mod i 24)) 0)
              (aref table (1+ (ash i 1))) (aref (aref gradients (mod i 24)) 1)))
      table)
  :test #'equalp)

(u:define-constant +open-simplex2-fast-2d/lookup+
    (let ((data #(-0.788675134594813d0 0.211324865405187d0 0d0 0d0 -0.577350269189626d0
                  -0.577350269189626d0 0.211324865405187d0 -0.788675134594813d0)))
      (make-array 8 :element-type 'u:f64 :initial-contents data))
  :test #'equalp)

(u:fn-> open-simplex2-fast-2d/permute (rng:generator)
        (values (simple-array u:f64 (4096))
                (simple-array u:b16 (2048))))
(defun open-simplex2-fast-2d/permute (rng)
  (declare (optimize speed))
  (let ((source (make-array 2048 :element-type 'u:b16 :initial-element 0))
        (table (make-array 2048 :element-type 'u:b16 :initial-element 0))
        (gradients (make-array 4096 :element-type 'u:f64)))
    (dotimes (i 2048)
      (setf (aref source i) i))
    (loop :for i :from 2047 :downto 0
          :for r = (mod (+ (rng:int rng 0 #.(1- (expt 2 32)) nil) 31) (1+ i))
          :for x = (aref source r)
          :for pgi = (ash i 1)
          :for gi = (ash x 1)
          :do (setf (aref table i) x
                    (aref gradients pgi) (aref +open-simplex2-fast-2d/gradients+ gi)
                    (aref gradients (1+ pgi)) (aref +open-simplex2-fast-2d/gradients+ (1+ gi))
                    (aref source r) (aref source i)))
    (values gradients table)))

(u:fn-> %open-simplex2-fast-2d ((simple-array u:f64 (4096)) (simple-array u:b16 (2048)) f50 f50)
        u:f32)
(declaim (inline %open-simplex2-fast-2d))
(defun %open-simplex2-fast-2d (gradients table x y)
  (declare (optimize speed))
  (u:mvlet* ((value 0d0)
             (s (* (+ x y) 0.366025403784439d0))
             (xsb xsi (floor (+ x s)))
             (ysb ysi (floor (+ y s)))
             (index (truncate (1+ (* (- ysi xsi) 0.5))))
             (ssi (* (+ xsi ysi) -0.211324865405187d0))
             (xi (+ xsi ssi))
             (yi (+ ysi ssi)))
    (declare (type u:f64 value))
    (dotimes (i 3 (float value 1f0))
      (block nil
        (let* ((lpx (* (+ index i) 2))
               (lpy (1+ lpx))
               (dx (+ xi (aref +open-simplex2-fast-2d/lookup+ lpx)))
               (dy (+ yi (aref +open-simplex2-fast-2d/lookup+ lpy)))
               (attn (- 0.5 (expt dx 2) (expt dy 2))))
          (when (minusp attn)
            (return))
          (let* ((pxm (logand (+ xsb (ldb (byte 1 lpx) #b10110001)) 2047))
                 (pym (logand (+ ysb (ldb (byte 1 lpy) #b10110001)) 2047))
                 (grad-index (ash (logxor (aref table pxm) pym) 1))
                 (grad-x (aref gradients grad-index))
                 (grad-y (aref gradients (1+ grad-index))))
            (setf attn (expt attn 2))
            (incf value (* (expt attn 2) (+ (* grad-x dx) (* grad-y dy))))))))))

;;; 3D OpenSimplex2F

(u:eval-always
  (defstruct (open-simplex2-fast-3d/lattice-point
              (:constructor %make-oss2f3d-lattice-point)
              (:conc-name oss2f3d-lattice-point-)
              (:predicate nil)
              (:copier nil))
    (dxr 0d0 :type u:f64)
    (dyr 0d0 :type u:f64)
    (dzr 0d0 :type u:f64)
    (xrv 0 :type u:ub32)
    (yrv 0 :type u:ub32)
    (zrv 0 :type u:ub32)
    (next/fail nil :type (or open-simplex2-fast-3d/lattice-point null))
    (next/success nil :type (or open-simplex2-fast-3d/lattice-point null)))

  (defun make-oss2f3d-lattice-point (xrv yrv zrv lattice)
    (let ((l1 (* lattice 0.5d0))
          (l2 (* lattice 1024)))
      (%make-oss2f3d-lattice-point :dxr (+ (- xrv) l1)
                                   :dyr (+ (- yrv) l1)
                                   :dzr (+ (- zrv) l1)
                                   :xrv (+ xrv l2)
                                   :yrv (+ yrv l2)
                                   :zrv (+ zrv l2))))

  (defun build-oss2f3d-lattice-points ()
    (let ((table (make-array 8)))
      (dotimes (i 8)
        (let* ((i1 (logand i 1))
               (j1 (logand (ash i -1) 1))
               (k1 (logand (ash i -2) 1))
               (i2 (logxor i1))
               (j2 (logxor j1))
               (k2 (logxor k1))
               (c0 (make-oss2f3d-lattice-point i1 j1 k1 0))
               (c1 (make-oss2f3d-lattice-point (+ i1 i2) (+ j1 j2) (+ k1 k2) 1))
               (c2 (make-oss2f3d-lattice-point (logxor i1 1) j1 k1 0))
               (c3 (make-oss2f3d-lattice-point i1 (logxor j1 1) k1 0))
               (c4 (make-oss2f3d-lattice-point i1 j1 (logxor k1 1) 0))
               (c5 (make-oss2f3d-lattice-point (+ i1 (logxor i2 1)) (+ j1 j2) (+ k1 k2) 1))
               (c6 (make-oss2f3d-lattice-point (+ i1 i2) (+ j1 (logxor j2 1)) (+ k1 k2) 1))
               (c7 (make-oss2f3d-lattice-point (+ i1 i2) (+ j1 j2) (+ k1 (logxor k2 1)) 1)))
          (setf (oss2f3d-lattice-point-next/fail c0) c1
                (oss2f3d-lattice-point-next/success c0) c1
                (oss2f3d-lattice-point-next/fail c1) c2
                (oss2f3d-lattice-point-next/success c1) c2
                (oss2f3d-lattice-point-next/fail c2) c3
                (oss2f3d-lattice-point-next/success c2) c6
                (oss2f3d-lattice-point-next/fail c3) c4
                (oss2f3d-lattice-point-next/success c3) c5
                (oss2f3d-lattice-point-next/fail c4) c5
                (oss2f3d-lattice-point-next/success c4) c5
                (oss2f3d-lattice-point-next/fail c5) c6
                (oss2f3d-lattice-point-next/fail c6) c7
                (aref table i) c0)))
      table)))

(u:define-constant +open-simplex2-fast-3d/gradients+
    (let ((gradients #(#(-72.97611190577304d0 -72.97611190577304d0 -32.80201376986577d0)
                       #(-72.97611190577304d0 -72.97611190577304d0 32.80201376986577d0)
                       #(-101.23575520696082d0 -38.448924468736266d0 0d0)
                       #(-38.448924468736266d0 -101.23575520696082d0 0d0)
                       #(-72.97611190577304d0 -32.80201376986577d0 -72.97611190577304d0)
                       #(-72.97611190577304d0 32.80201376986577d0 -72.97611190577304d0)
                       #(-38.448924468736266d0 0d0 -101.23575520696082d0)
                       #(-101.23575520696082d0 0d0 -38.448924468736266d0)
                       #(-72.97611190577304d0 -32.80201376986577d0 72.97611190577304d0)
                       #(-72.97611190577304d0 32.80201376986577d0 72.97611190577304d0)
                       #(-101.23575520696082d0 0d0 38.448924468736266d0)
                       #(-38.448924468736266d0 0d0 101.23575520696082d0)
                       #(-72.97611190577304d0 72.97611190577304d0 -32.80201376986577d0)
                       #(-72.97611190577304d0 72.97611190577304d0 32.80201376986577d0)
                       #(-38.448924468736266d0 101.23575520696082d0 0d0)
                       #(-101.23575520696082d0 38.448924468736266d0 0d0)
                       #(-32.80201376986577d0 -72.97611190577304d0 -72.97611190577304d0)
                       #(32.80201376986577d0 -72.97611190577304d0 -72.97611190577304d0)
                       #(0d0 -101.23575520696082d0 -38.448924468736266d0)
                       #(0d0 -38.448924468736266d0 -101.23575520696082d0)
                       #(-32.80201376986577d0 -72.97611190577304d0 72.97611190577304d0)
                       #(32.80201376986577d0 -72.97611190577304d0 72.97611190577304d0)
                       #(0d0 -38.448924468736266d0 101.23575520696082d0)
                       #(0d0 -101.23575520696082d0 38.448924468736266d0)
                       #(-32.80201376986577d0 72.97611190577304d0 -72.97611190577304d0)
                       #(32.80201376986577d0 72.97611190577304d0 -72.97611190577304d0)
                       #(0d0 38.448924468736266d0 -101.23575520696082d0)
                       #(0d0 101.23575520696082d0 -38.448924468736266d0)
                       #(-32.80201376986577d0 72.97611190577304d0 72.97611190577304d0)
                       #(32.80201376986577d0 72.97611190577304d0 72.97611190577304d0)
                       #(0d0 101.23575520696082d0 38.448924468736266d0)
                       #(0d0 38.448924468736266d0 101.23575520696082d0)
                       #(72.97611190577304d0 -72.97611190577304d0 -32.80201376986577d0)
                       #(72.97611190577304d0 -72.97611190577304d0 32.80201376986577d0)
                       #(38.448924468736266d0 -101.23575520696082d0 0d0)
                       #(101.23575520696082d0 -38.448924468736266d0 0d0)
                       #(72.97611190577304d0 -32.80201376986577d0 -72.97611190577304d0)
                       #(72.97611190577304d0 32.80201376986577d0 -72.97611190577304d0)
                       #(101.23575520696082d0 0d0 -38.448924468736266d0)
                       #(38.448924468736266d0 0d0 -101.23575520696082d0)
                       #(72.97611190577304d0 -32.80201376986577d0 72.97611190577304d0)
                       #(72.97611190577304d0 32.80201376986577d0 72.97611190577304d0)
                       #(38.448924468736266d0 0d0 101.23575520696082d0)
                       #(101.23575520696082d0 0d0 38.448924468736266d0)
                       #(72.97611190577304d0 72.97611190577304d0 -32.80201376986577d0)
                       #(72.97611190577304d0 72.97611190577304d0 32.80201376986577d0)
                       #(101.23575520696082d0 38.448924468736266d0 0d0)
                       #(38.448924468736266d0 101.23575520696082d0 0d0)))
          (table (make-array 6144 :element-type 'u:f64)))
      (dotimes (i 2048)
        (setf (aref table (- (ash i 2) i)) (aref (aref gradients (mod i 48)) 0)
              (aref table (+ (- (ash i 2) i) 1)) (aref (aref gradients (mod i 48)) 1)
              (aref table (+ (- (ash i 2) i) 2)) (aref (aref gradients (mod i 48)) 2)))
      table)
  :test #'equalp)

(u:define-constant +open-simplex2-fast-3d/lookup+
    (build-oss2f3d-lattice-points)
  :test #'equalp)

;;;

(u:fn-> open-simplex2-fast-3d/permute (rng:generator)
        (values (simple-array u:f64 (6144))
                (simple-array u:b16 (2048))))
(defun open-simplex2-fast-3d/permute (rng)
  (declare (optimize speed))
  (let ((source (make-array 2048 :element-type 'u:b16 :initial-element 0))
        (table (make-array 2048 :element-type 'u:b16 :initial-element 0))
        (gradients (make-array 6144 :element-type 'u:f64)))
    (dotimes (i 2048)
      (setf (aref source i) i))
    (loop :for i :from 2047 :downto 0
          :for r = (mod (+ (rng:int rng 0 #.(1- (expt 2 32)) nil) 31) (1+ i))
          :for x = (aref source r)
          :for pgi = (- (ash i 2) i)
          :for gi = (- (ash x 2) x)
          :do (setf (aref table i) x
                    (aref gradients pgi) (aref +open-simplex2-fast-3d/gradients+ gi)
                    (aref gradients (+ pgi 1)) (aref +open-simplex2-fast-3d/gradients+ (+ gi 1))
                    (aref gradients (+ pgi 2)) (aref +open-simplex2-fast-3d/gradients+ (+ gi 2))
                    (aref source r) (aref source i)))
    (values gradients table)))

(defun %open-simplex2-fast-3d (gradients table x y z)
  (u:mvlet* ((value 0d0)
             ;; begin classic variant
             ;; (r (* (/ 2 3) (+ x y z)))
             ;; (xr (- r x))
             ;; (yr (- r y))
             ;; (zr (- r z))
             ;; end classic variant
             ;; begin xy/z variant
             (xy (+ x y))
             (s2 (* xy -0.211324865405187d0))
             (zz (* z 0.577350269189626d0))
             (xr (- (+ x s2) zz))
             (yr (- (+ y s2) zz))
             (zr (+ (* xy 0.577350269189626d0) zz))
             ;; end xy/z variant
             (xrb xri (floor xr))
             (yrb yri (floor yr))
             (zrb zri (floor zr))
             (xht (truncate (+ xri 0.5)))
             (yht (truncate (+ yri 0.5)))
             (zht (truncate (+ zri 0.5)))
             (index (logior xht (ash yht 1) (ash zht 2)))
             (c (aref +open-simplex2-fast-3d/lookup+ index)))
    (u:while c
      (let* ((dxr (+ xri (oss2f3d-lattice-point-dxr c)))
             (dyr (+ yri (oss2f3d-lattice-point-dyr c)))
             (dzr (+ zri (oss2f3d-lattice-point-dzr c)))
             (attn (- 0.5 (expt dxr 2) (expt dyr 2) (expt dzr 2))))
        (if (minusp attn)
            (setf c (oss2f3d-lattice-point-next/fail c))
            (let* ((pxm (logand (+ xrb (oss2f3d-lattice-point-xrv c)) 2047))
                   (pym (logand (+ yrb (oss2f3d-lattice-point-yrv c)) 2047))
                   (pzm (logand (+ zrb (oss2f3d-lattice-point-zrv c)) 2047))
                   (foo (logxor (aref table (logxor (aref table pxm) pym)) pzm))
                   (grad-index (- (ash foo 2) foo))
                   (grad-x (aref gradients grad-index))
                   (grad-y (aref gradients (+ grad-index 1)))
                   (grad-z (aref gradients (+ grad-index 2))))
              (setf attn (expt attn 2))
              (incf value (* (expt attn 2) (+ (* grad-x dxr) (* grad-y dyr) (* grad-z dzr))))
              (setf c (oss2f3d-lattice-point-next/success c))))))
    value))
