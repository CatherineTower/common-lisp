(in-package #:mfiano.gamedev.shadow)

(defgeneric get-uniform-data (type parts)
  (:method (type parts)
    (list (list (reverse parts) (varjo:type->type-spec type)))))

(defmethod get-uniform-data ((type varjo:v-user-struct) parts)
  (cons (list (reverse parts) (varjo:type->type-spec type))
        (loop :for (slot-name slot-type . nil) :in (varjo.internals:v-slots type)
              :append (get-uniform-data slot-type (cons slot-name parts)))))

(defmethod get-uniform-data ((type varjo:v-array) parts)
  (loop :with dimensions = (first (varjo:v-dimensions type))
        :with element-type = (varjo:v-element-type type)
        :for i :below dimensions
        :when (zerop i)
          :collect (list (reverse parts) (cons (varjo:type->type-spec element-type) dimensions))
        :append (get-uniform-data element-type (cons i parts))))

(defun store-uniforms (program)
  (labels ((%get-stage-uniforms (stage)
             (loop :for uniform :in (varjo:uniform-variables stage)
                   :for type = (varjo:v-type-of uniform)
                   :unless (or (has-qualifier-p uniform :ubo)
                               (has-qualifier-p uniform :ssbo))
                     :append (get-uniform-data type (list (varjo:name uniform)))))
           (%get-program-uniforms (program)
             (let ((uniforms nil))
               (dolist (stage (translated-stages program))
                 (loop :for (parts type-spec) :in (%get-stage-uniforms stage)
                       :do (push (list (ensure-keyword (parts->string parts))
                                       (parts->string
                                        parts
                                        #'varjo.internals:safe-glsl-name-string)
                                       type-spec)
                                 uniforms)))
               uniforms)))
    (let ((uniforms (%get-program-uniforms program)))
      (dolist (uniform uniforms)
        (destructuring-bind (id name type) uniform
          (setf (u:href (uniforms program) id) (u:dict #'eq :name name :type type))))
      (u:do-hash-keys (k (uniforms program))
        (unless (find k uniforms :key #'car)
          (remhash k (uniforms program)))))))

(defun store-uniform-locations (program)
  (let ((id (id program)))
    (gl:use-program id)
    (u:do-hash-values (v (uniforms program))
      (setf (u:href v :location) (gl:get-uniform-location id (u:href v :name))))
    (gl:use-program 0)))

(declaim (inline get-uniform-location))
(defun get-uniform-location (uniform)
  (declare (optimize speed))
  (u:if-let ((uniform-table (u:href (uniforms *current-program*) uniform)))
    (u:href uniform-table :location)
    (error "Uniform ~s not defined for shader program ~s."
           uniform
           (name *current-program*))))

(defgeneric set-uniform (uniform value)
  (:method ((uniform symbol) value)
    (let ((location (get-uniform-location uniform)))
      (set-uniform location value)))
  (:method ((uniform integer) (value (eql nil)))
    (%gl:uniform-1i uniform 0))
  (:method ((uniform integer) (value (eql t)))
    (%gl:uniform-1i uniform 1))
  (:method ((uniform integer) (value integer))
    (%gl:uniform-1i uniform value))
  (:method ((uniform integer) (value float))
    (%gl:uniform-1f uniform value))
  (:method ((uniform integer) (value math:vector2))
    (let ((value (math:to-array! value :single-float)))
      (%gl:uniform-2f uniform (aref value 0) (aref value 1))))
  (:method ((uniform integer) (value math:vector3))
    (let ((value (math:to-array! value :single-float)))
      (%gl:uniform-3f uniform (aref value 0) (aref value 1) (aref value 2))))
  (:method ((uniform integer) (value math:vector4))
    (let ((value (math:to-array! value :single-float)))
      (%gl:uniform-4f uniform (aref value 0) (aref value 1) (aref value 2) (aref value 3))))
  (:method ((uniform integer) (value math:matrix2))
    (let ((value (math:to-array! value :single-float)))
      (gl:uniform-matrix-2fv uniform value nil)))
  (:method ((uniform integer) (value math:matrix3))
    (let ((value (math:to-array! value :single-float)))
      (gl:uniform-matrix-3fv uniform value nil)))
  (:method ((uniform integer) (value math:matrix4))
    (let ((value (math:to-array! value :single-float)))
      (gl:uniform-matrix-4fv uniform value nil))))
