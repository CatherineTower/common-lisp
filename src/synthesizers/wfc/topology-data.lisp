(in-package #:%syntex.synthesizers.wfc)

(defclass topology-data ()
  ((%topology :reader topology
              :initarg :topology)
   (%data :reader data
          :initarg :data)))

(defun make-topology-data (topology data)
  (etypecase data
    ((simple-array t (*))
     (make-instance 'topology-data-1d :topology topology :data data))
    ((simple-array t (* *))
     (make-instance 'topology-data-2d :topology topology :data data))
    ((simple-array t (* * *))
     (make-instance 'topology-data-3d :topology topology :data data))))

(defgeneric make-topology-data-by-coords (topology func)
  (:method ((topology topology) (func function))
    (let* ((width (width topology))
           (height (height topology))
           (depth (depth topology))
           (data (make-array (list width height depth))))
      (dotimes (z depth)
        (dotimes (y height)
          (dotimes (x width)
            (let* ((point (make-point x y z))
                   (index (get-index topology point)))
              (when (contains-index-p topology index)
                (setf (aref data x y z) (funcall func point)))))))
      (make-topology-data topology data))))

(defgeneric make-topology-data-by-index (topology func)
  (:method ((topology topology) (func function))
    (let ((data (make-array (index-count topology))))
      (dolist (i (get-indices topology))
        (setf (aref data i) (funcall func i)))
      (make-topology-data topology data))))

(defgeneric to-2d-array (topology-data)
  (:method ((topology-data topology-data))
    (let* ((topology (topology topology-data))
           (width (width topology))
           (height (height topology))
           (array (make-array (list width height))))
      (dotimes (x width)
        (dotimes (y height)
          (let ((point (make-point x y)))
            (setf (aref array x y) (get-value topology-data point)))))
      array)))

(defgeneric to-3d-array (topology-data)
  (:method ((topology-data topology-data))
    (let* ((topology (topology topology-data))
           (width (width topology))
           (height (height topology))
           (depth (depth topology))
           (array (make-array (list width height depth))))
      (dotimes (x width)
        (dotimes (y height)
          (dotimes (z depth)
            (let ((point (make-point x y z)))
              (setf (aref array x y z) (get-value topology-data point))))))
      array)))

(defgeneric get-value (topology-data point/index))
