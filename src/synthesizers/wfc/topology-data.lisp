(in-package #:%syntex.synthesizers.wfc.topology-data)

(defun make-data (topology values)
  (etypecase values
    ((simple-array t (*))
     (make-instance 'data-1d :topology topology :values values))
    ((simple-array t (* *))
     (make-instance 'data-2d :topology topology :values values))
    ((simple-array t (* * *))
     (make-instance 'data-3d :topology topology :values values))))

(defun make-data-by-coords (topology func)
  (let* ((width (top:width topology))
         (height (top:height topology))
         (depth (top:depth topology))
         (values (make-array (list width height depth))))
    (dotimes (z depth)
      (dotimes (y height)
        (dotimes (x width)
          (let* ((point (point:point x y z))
                 (index (top:get-index topology point)))
            (when (top:contains-index-p topology index)
              (setf (aref values x y z) (funcall func point)))))))
    (make-data topology values)))

(defun make-data-by-index (topology func)
  (let ((values (make-array (top:index-count topology))))
    (dolist (i (top:get-indices topology))
      (setf (aref values i) (funcall func i)))
    (make-data topology values)))

(defun to-2d-array (data)
  (let* ((topology (top:topology data))
         (width (top:width topology))
         (height (top:height topology))
         (values (make-array (list width height))))
    (dotimes (x width)
      (dotimes (y height)
        (let ((point (point:point x y)))
          (setf (aref values x y) (top:get data point)))))
    values))

(defun to-3d-array (data)
  (let* ((topology (top:topology data))
         (width (top:width topology))
         (height (top:height topology))
         (depth (top:depth topology))
         (values (make-array (list width height depth))))
    (dotimes (x width)
      (dotimes (y height)
        (dotimes (z depth)
          (let ((point (point:point x y z)))
            (setf (aref values x y z) (top:get data point))))))
    values))
