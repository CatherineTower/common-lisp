(in-package #:%syntex.synthesizers.wfc.overlapping-analysis)

(defun get-transformed-samples (sample &optional tile-transform)
  (let ((tile-transform (or tile-transform (tfm:make-tile-transform)))
        (result (make-array 0 :fill-pointer 0 :adjustable t)))
    (map nil
         (lambda (x)
           (vector-push-extend (top:transform sample x tile-transform) result))
         (tfm:group tile-transform))
    result))

(defun try-extract (sample point1 point2)
  (let* ((topology (top:topology sample))
         (width (top:width topology))
         (height (top:height topology))
         (depth (top:depth topology))
         (nx (base:point-x point1))
         (ny (base:point-y point1))
         (nz (base:point-z point1))
         (values (make-array (list nx ny nz))))
    (dotimes (tx nx)
      (let ((sx (mod (+ (base:point-x point2) tx) width)))
        (dotimes (ty ny)
          (let ((sy (mod (+ (base:point-y point2) ty) height)))
            (dotimes (tz nz)
              (let* ((sz (mod (+ (base:point-z point2) tz) depth))
                     (point-s (base:make-point sx sy sz))
                     (index (top:get-index topology point-s)))
                (unless (top:contains-index-p topology index)
                  (return-from try-extract nil))
                (setf (aref values tx ty tz) (top:get sample point-s))))))))
    (pa:make-pattern-array values)))

(defun get-patterns (sample point periodicity pattern-indices pattern-arrays frequencies)
  (let* ((topology (top:topology sample))
         (width (top:width topology))
         (height (top:height topology))
         (depth (top:depth topology))
         (max-x (if (top:periodic-x periodicity) (1- width) (- width (base:point-x point))))
         (max-y (if (top:periodic-y periodicity) (1- height) (- height (base:point-y point))))
         (max-z (if (top:periodic-z periodicity) (1- depth) (- depth (base:point-z point)))))
    (dotimes (x (1+ max-x))
      (dotimes (y (1+ max-y))
        (dotimes (z (1+ max-z))
          (u:when-let ((pattern-array (try-extract sample point (base:make-point x y z))))
            (u:if-let ((pattern (u:href pattern-indices pattern-array)))
              (incf (aref frequencies pattern))
              (let* ((pattern-index-count (hash-table-count pattern-indices))
                     (pattern pattern-index-count))
                (setf (u:href pattern-indices pattern-array) pattern)
                (vector-push-extend pattern-array pattern-arrays)
                (vector-push-extend 1d0 frequencies)))))))))
