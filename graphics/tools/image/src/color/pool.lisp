(in-package #:%mfiano.graphics.tools.image.color)

(defun ensure-color-pool (space-name)
  (declare (optimize speed))
  (let ((pools base:*worker-pools*))
    (or (u:href pools space-name)
        (let ((array (make-array 2 :adjustable t :fill-pointer 0)))
          (dotimes (i (length array))
            (setf (aref array i) (make-model-from-space space-name)))
          (setf (u:href pools space-name) array)
          array))))

(declaim (inline reset-pool-color))
(defun reset-pool-color (color)
  (zero-channels color)
  (copy-illuminant-name color color t)
  (values))

(defun get-pool-color (space-name &key copy)
  (declare (optimize speed))
  (let ((pool (ensure-color-pool space-name)))
    (declare ((vector t) pool))
    (when (zerop (fill-pointer pool))
      (map-into pool (lambda () (make-model-from-space space-name))))
    (let ((color (vector-pop pool)))
      (if copy
          (copy-channels copy color)
          (reset-pool-color color))
      color)))

(defun put-pool-color (color)
  (declare (optimize speed))
  (let ((pool (ensure-color-pool (space-name color))))
    (declare (vector pool))
    (vector-push-extend color pool (array-total-size pool))
    (values)))

(defmacro with-pool-color ((binding space-name &key copy) &body body)
  `(if (boundp 'base:*worker-pools*)
       (let ((,binding (get-pool-color ,space-name :copy ,copy)))
         (unwind-protect (progn ,@body)
           (put-pool-color ,binding)))
       (let ((,binding (make-model-from-space ,space-name)))
         ,@(when copy
             `((copy-channels ,copy ,binding)))
         ,@body)))
