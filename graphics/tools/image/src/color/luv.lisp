(in-package #:mfiano.graphics.tools.image.color)

(u:define-constant +cie-e+ #.(float 216/24389 1d0))
(u:define-constant +cie-k+ #.(float 24389/27 1d0))

(defun luv->xyz (in out)
  (declare (optimize speed))
  (let ((in-data (data in))
        (out-data (data out))
        (white-point (get-white-point (illuminant-name out))))
    (declare (v3:vec in-data out-data white-point))
    (v3:with-components ((luv- in-data)
                         (white- white-point)
                         (xyz- out-data))
      (when (zerop luv-x)
        (v3:zero! out-data)
        (return-from luv->xyz out))
      (let* ((div (+ white-x (* white-y 15) (* white-z 3)))
             (u* (/ (* white-x 4) div))
             (v* (/ (* white-y 9) div))
             (a (* (1- (/ (* 52 luv-x) (+ luv-y (* 13 luv-x u*)))) #.(/ 3)))
             (y (if (> luv-x (* +cie-k+ +cie-e+))
                    (expt (* (+ luv-x 16) #.(/ 116)) 3)
                    (* luv-x #.(/ +cie-k+))))
             (d (* (- (/ (* 39 luv-x) (+ luv-z (* 13 luv-x v*))) 5) y))
             (-5y (* y -5))
             (x (/ (- d -5y) (- a -1/3)))
             (z (+ (* x a) -5y)))
        (setf xyz-x x
              xyz-y y
              xyz-z z)
        out))))

(defun xyz->luv (in out)
  (declare (optimize speed))
  (let ((in-data (data in))
        (out-data (data out))
        (white-point (get-white-point (illuminant-name in))))
    (declare (v3:vec in-data out-data white-point))
    (v3:with-components ((xyz- in-data)
                         (white- white-point)
                         (luv- out-data))
      (let* ((reference-y (/ xyz-y white-y))
             (l (if (> reference-y +cie-e+)
                    (- (* 116 (expt reference-y #.(/ 3d0))) 16)
                    (* +cie-k+ reference-y)))
             (div-uv (+ xyz-x (* xyz-y 15) (* xyz-z 3)))
             (div-w (+ white-x (* white-y 15) (* white-z 3))))
        (if (zerop div-uv)
            (v3:zero! out-data)
            (setf luv-x l
                  luv-y (* l 13 (- (/ (* xyz-x 4) div-uv) (/ (* white-x 4) div-w)))
                  luv-z (* l 13 (- (/ (* xyz-y 9) div-uv) (/ (* white-y 9) div-w)))))
        out))))
