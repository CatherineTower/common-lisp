(in-package #:mfiano.graphics.tools.color)

(defgeneric decompose (color))

(defmethod decompose ((color rgb8))
  (declare (optimize speed))
  (flet ((%decompose (value)
           (%or-shift8 value)))
    (declare (inline %decompose))
    (values (%decompose (rgb8-r color))
            (%decompose (rgb8-g color))
            (%decompose (rgb8-b color))
            #xffff)))

(defmethod decompose ((color rgb16))
  (declare (optimize speed))
  (values (rgb16-r color)
          (rgb16-g color)
          (rgb16-b color)
          #xffff))

(defmethod decompose ((color rgba8))
  (declare (optimize speed))
  (flet ((%decompose (value alpha)
           (truncate (* (%or-shift8 value) alpha) #xff)))
    (declare (inline %decompose))
    (let ((a (rgba8-a color)))
      (values (%decompose (rgba8-r color) a)
              (%decompose (rgba8-g color) a)
              (%decompose (rgba8-b color) a)
              (%or-shift8 a)))))

(defmethod decompose ((color rgba8-pma))
  (declare (optimize speed))
  (values (%or-shift8 (rgba8-r color))
          (%or-shift8 (rgba8-g color))
          (%or-shift8 (rgba8-b color))
          (%or-shift8 (rgba8-a color))))

(defmethod decompose ((color rgba16))
  (declare (optimize speed))
  (flet ((%decompose (value alpha)
           (truncate (* value alpha) #xffff)))
    (declare (inline %decompose))
    (let ((a (rgba16-a color)))
      (values (%decompose (rgba16-r color) a)
              (%decompose (rgba16-g color) a)
              (%decompose (rgba16-b color) a)
              a))))

(defmethod decompose ((color rgba16-pma))
  (declare (optimize speed))
  (values (rgba16-r color)
          (rgba16-g color)
          (rgba16-b color)
          (rgba16-a color)))

(defmethod decompose ((color gray8))
  (declare (optimize speed))
  (let ((v (%or-shift8 (gray8-value color))))
    (values v v v #xffff)))

(defmethod decompose ((color gray16))
  (declare (optimize speed))
  (let ((v (gray16-value color)))
    (values v v v #xffff)))

(defmethod decompose ((color alpha8))
  (declare (optimize speed))
  (let ((a (%or-shift8 (alpha8-alpha color))))
    (values a a a a)))

(defmethod decompose ((color alpha16))
  (declare (optimize speed))
  (let ((a (alpha16-alpha color)))
    (values a a a a)))

(defmethod decompose ((color gray-alpha8))
  (declare (optimize speed))
  (let ((v (%or-shift8 (gray-alpha8-value color)))
        (a (%or-shift8 (gray-alpha8-alpha color))))
    (values v v v a)))

(defmethod decompose ((color gray-alpha16))
  (declare (optimize speed))
  (let ((v (gray-alpha16-value color))
        (a (gray-alpha16-alpha color)))
    (values v v v a)))
