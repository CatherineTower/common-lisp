(in-package #:mfiano.graphics.tools.color)

(defgeneric decompose (color))

(defmethod decompose ((color rgba))
  (declare (optimize speed))
  (flet ((%decompose (value alpha)
           (truncate (* (%or-shift value) alpha) #xff)))
    (declare (inline %decompose))
    (let ((a (rgba-a color)))
      (values (%decompose (rgba-r color) a)
              (%decompose (rgba-g color) a)
              (%decompose (rgba-b color) a)
              (%or-shift a)))))

(defmethod decompose ((color rgba-pma))
  (declare (optimize speed))
  (values (%or-shift (rgba-r color))
          (%or-shift (rgba-g color))
          (%or-shift (rgba-b color))
          (%or-shift (rgba-a color))))

(defmethod decompose ((color rgba16))
  (declare (optimize speed))
  (flet ((%decompose (value alpha)
           (truncate (* value alpha) #xffff)))
    (declare (inline %decompose))
    (let ((a (rgba16-a color)))
      (values (%decompose (rgba16-r color) a)
              (%decompose (rgba16-g color) a)
              (%decompose (rgba16-b color) a)
              a))))

(defmethod decompose ((color rgba16-pma))
  (declare (optimize speed))
  (values (rgba16-r color)
          (rgba16-g color)
          (rgba16-b color)
          (rgba16-a color)))

(defmethod decompose ((color alpha))
  (declare (optimize speed))
  (let ((a (%or-shift (alpha-value color))))
    (values a a a a)))

(defmethod decompose ((color alpha16))
  (declare (optimize speed))
  (let ((a (alpha16-value color)))
    (values a a a a)))

(defmethod decompose ((color gray))
  (declare (optimize speed))
  (let ((v (%or-shift (gray-value color))))
    (values v v v #xffff)))

(defmethod decompose ((color gray16))
  (declare (optimize speed))
  (let ((v (gray16-value color)))
    (values v v v #xffff)))
