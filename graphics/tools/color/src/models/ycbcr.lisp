(in-package #:mfiano.graphics.tools.color)

(defstruct (ycbcr
            (:include color)
            (:constructor ycbcr (y cb cr))
            (:predicate nil)
            (:copier nil))
  (y 0 :type u:ub8)
  (cb 0 :type u:ub8)
  (cr 0 :type u:ub8))

(defun %rgb->ycbcr (r g b)
  (declare (optimize speed)
           (u:ub16 r g b))
  (let ((y (ash (+ (* r 19595) (* g 38470) (* b 7471) #x8000) -16))
        (cb (+ (- (* r -11056) (* g 21712)) (* b 32768) #x808000))
        (cr (+ (- (* r 32768) (* g 27440) (* b 5328)) #x808000)))
    (if (not (logtest #xff000000 cb))
        (setf cb (ldb (byte 8 0) (ash cb -16)))
        (setf cb (ldb (byte 8 0) (lognot (ash cb -31)))))
    (if (not (logtest #xff000000 cr))
        (setf cr (ldb (byte 8 0) (ash cr -16)))
        (setf cr (ldb (byte 8 0) (lognot (ash cr -31)))))
    (values y cb cr)))

(defmethod decompose ((color ycbcr))
  (declare (optimize speed))
  (let* ((y (%or-shift16 (ycbcr-y color)))
         (cb (- (ycbcr-cb color) 128))
         (cr (- (ycbcr-cr color) 128))
         (r (+ y (* cr 91881)))
         (g (- y (* cb 22554) (* cr 46802)))
         (b (+ y (* cb 116130))))
    (if (not (logtest #xff000000 r))
        (setf r (ash r -8))
        (setf r (logand (lognot (ash r -31)) #xffff)))
    (if (not (logtest #xff000000 g))
        (setf g (ash g -8))
        (setf g (logand (lognot (ash g -31)) #xffff)))
    (if (not (logtest #xff000000 b))
        (setf b (ash b -8))
        (setf b (logand (lognot (ash b -31)) #xffff)))
    (values r g b #xffff)))

(defmethod convert ((source color) (target ycbcr))
  (declare (optimize speed))
  (u:mvlet ((r g b (decompose source)))
    (declare (u:ub16 r g b))
    (u:mvlet ((y cb cr (%rgb->ycbcr (ash r -8) (ash g -8) (ash b -8))))
      (setf (ycbcr-y target) y
            (ycbcr-cb target) cb
            (ycbcr-cr target) cr)
      target)))

(defmethod convert ((source color) (target (eql 'ycbcr)))
  (convert source (ycbcr 0 0 0)))
