(in-package #:mfiano.graphics.procgen.dungen)

(defun estimate-room-count (stage)
  (let* ((room-extent (stage-room-extent stage))
         (width (stage-width stage))
         (height (stage-height stage))
         (density (stage-density stage))
         (min 9)
         (max (expt room-extent 2))
         (average (+ min (/ (- max min) 2))))
    (values (floor (/ (* width height density) average)))))

(defun generate-room-properties (stage)
  (let* ((rng (state-rng *state*))
         (width (stage-width stage))
         (height (stage-height stage))
         (room-extent (stage-room-extent stage))
         (w (rng:int/parity rng 3 room-extent))
         (h (rng:int/parity rng 3 room-extent))
         (x (rng:int/parity rng 1 (- width w)))
         (y (rng:int/parity rng 1 (- height h))))
    (values x y w h)))

(defun carve-room (stage)
  (multiple-value-bind (x y w h) (generate-room-properties stage)
    (let* ((rx (floor w 2))
           (ry (floor h 2))
           (px (+ rx x))
           (py (+ ry y))
           (k1 (funcall (layout :rectangle :max-x rx :max-y ry)
                        stage px py))
           (k2 (funcall (layout :rectangle :max-x (1+ rx) :max-y (1+ ry))
                        stage px py)))
      (unless (kernel-detect k2 #'carved-p)
        (make-region)
        (kernel-map k1 (lambda (x) (carve x :room)))))))

(defun carve-rooms (stage)
  (loop :with max = (estimate-room-count stage)
        :with count = 0
        :with tries = 0
        :until (or (= count max)
                   (>= tries 500))
        :do (if (carve-room stage)
                (progn
                  (setf tries 0)
                  (incf count))
                (incf tries))))
