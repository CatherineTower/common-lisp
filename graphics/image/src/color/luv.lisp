(in-package #:%mfiano.graphics.image.color)

(u:eval-always
  (u:define-constant +cie-e+ #.(float 216/24389 1d0))
  (u:define-constant +cie-k+ #.(float 24389/27 1d0)))

(define-color-spaces ()
  (luv :illuminant e))

(defclass luv (model) ()
  (:default-initargs
   :channel-names '(l u v)))

(defun luv (l u v &key)
  (make-instance 'luv :channel0 l :channel1 u :channel2 v))

(defmethod default-color ((model (eql 'luv)) &rest args)
  (declare (ignore args))
  (luv 0 0 0))

(defun luv->xyz (in out)
  (declare (optimize speed))
  (let ((in-channels (channels in))
        (out-channels (channels out))
        (white-point (get-white-point (illuminant-name out))))
    (declare (v3:vec in-channels out-channels white-point))
    (v3:with-components ((i in-channels)
                         (o out-channels)
                         (w white-point))
      (when (zerop ix)
        (v3:zero! out-channels)
        (return-from luv->xyz out))
      (let* ((div (+ wx (* wy 15) (* wz 3)))
             (a (* (1- (/ (* 52 ix) (+ iy (* 13 ix (/ (* wx 4) div))))) #.(/ 3)))
             (y (if (> ix #.(* +cie-k+ +cie-e+))
                    (expt (* (+ ix 16) #.(/ 116)) 3)
                    (* ix #.(/ +cie-k+))))
             (d (* (- (/ (* 39 ix) (+ iz (* 13 ix (/ (* wy 9) div)))) 5) y))
             (-5y (* y -5)))
        (setf ox (/ (- d -5y) (- a -1/3))
              oy y
              oz (+ (* ox a) -5y))
        out))))

(defun xyz->luv (in out)
  (declare (optimize speed))
  (let ((in-channels (channels in))
        (out-channels (channels out))
        (white-point (get-white-point (illuminant-name in))))
    (declare (v3:vec in-channels out-channels white-point))
    (v3:with-components ((i in-channels)
                         (o out-channels)
                         (w white-point))
      (let ((reference-y (/ iy wy))
            (div-uv (+ ix (* iy 15) (* iz 3)))
            (div-w (+ wx (* wy 15) (* wz 3))))
        (if (zerop div-uv)
            (v3:zero! out-channels)
            (setf ox (if (> reference-y +cie-e+)
                         (- (* 116 (expt reference-y #.(/ 3d0))) 16)
                         (* +cie-k+ reference-y))
                  oy (* ox 13 (- (/ (* ix 4) div-uv) (/ (* wx 4) div-w)))
                  oz (* ox 13 (- (/ (* iy 9) div-uv) (/ (* wy 9) div-w)))))
        out))))
