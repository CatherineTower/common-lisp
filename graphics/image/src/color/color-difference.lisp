(in-package #:%mfiano.graphics.image.color)

(u:define-constant +k-at-l+ 1d0)
(u:define-constant +k-at-c+ 1d0)
(u:define-constant +k-at-h+ 1d0)

(defun delta-e-2000 (color1 color2)
  (declare (optimize speed))
  (flet ((ensure-cielab (color)
           (if (eq (class-name (class-of color)) 'lab)
               color
               (base:convert color (lab 0 0 0))))

         (c-star (a b)
           (sqrt (+ (expt a 2)
                    (expt b 2))))

         (c-prime (a-prime b)
           (sqrt (+ (expt a-prime 2)
                    (expt b 2))))

         (a-prime (a c-bar)
           (let ((g (* 0.5d0 (- 1 (sqrt (/ (expt c-bar 7)
                                           (+ (expt c-bar 7)
                                              #.(expt 25 7))))))))
             (* a (1+ g))))

         (h-prime (b a-prime)
           (if (= 0 b a-prime)
               0
               (mod (u:radians->degrees (atan b a-prime))
                    360)))

         (h-bar-prime (h-prime-one h-prime-two c-prime-one c-prime-two)
           (let ((absolute-difference (abs (- h-prime-one h-prime-two)))
                 (sum (+ h-prime-one h-prime-two)))
             (if (= 0 (* c-prime-one c-prime-two))
                 sum
                 (/ (cond ((<= absolute-difference 180) sum)
                          ((and (> absolute-difference 180) (< sum 360))
                           (+ sum 360))
                          (t (- sum 360)))
                    2))))

         (delta-h-prime (h-prime-one h-prime-two c-prime-one c-prime-two)
           (if (= c-prime-one c-prime-two 0)
               0
               (let* ((difference (- h-prime-two h-prime-one))
                      (absolute-difference (abs difference)))
                 (cond ((<= absolute-difference 180d0) difference)
                       ((> difference 180d0) (- difference 360d0))
                       (t (+ difference 360d0)))))))

    (let* ((channels1 (channels (ensure-cielab color1)))
           (channels2 (channels (ensure-cielab color2)))
           (l1 (v3:x channels1))
           (l2 (v3:x channels2))
           (a1 (v3:y channels1))
           (a2 (v3:y channels2))
           (b1 (v3:z channels1))
           (b2 (v3:z channels2))
           (delta-l-prime (- l2 l1))
           (l-bar-prime (/ (+ l1 l2)
                           2))
           (c-bar (/ (+ (c-star a1 b1)
                        (c-star a2 b2))
                     2))
           (a-prime-one (a-prime a1 c-bar))
           (a-prime-two (a-prime a2 c-bar))
           (h-prime-one (h-prime b1 a-prime-one))
           (h-prime-two (h-prime b2 a-prime-two))
           (c-prime-one (c-prime a-prime-one b1))
           (c-prime-two (c-prime a-prime-two b2))
           (delta-c-prime (- c-prime-two c-prime-one))
           (c-bar-prime (/ (+ c-prime-one c-prime-two) 2))
           (h-bar-prime (h-bar-prime h-prime-one h-prime-two c-prime-one c-prime-two))
           (delta-h-prime (delta-h-prime h-prime-one h-prime-two c-prime-one c-prime-two))
           (delta-big-h-prime (* (sqrt (* c-prime-one c-prime-two))
                                 (sin (u:degrees->radians (/ delta-h-prime 2)))
                                 2))
           ;; Unfortunately, the symbol T is already taken. How inconsiderate
           (t* (+ 1
                  (- (* 0.17d0 (cos (u:degrees->radians (- h-bar-prime  30d0)))))
                  (* 0.24d0 (cos (u:degrees->radians (* 2 h-bar-prime))))
                  (* 0.32d0 (cos (u:degrees->radians (+ (* 3 h-bar-prime) 6d0))))
                  (- (* 0.2d0 (cos (u:degrees->radians (- (* h-bar-prime 4) 63d0)))))))
           (delta-theta (* 30 (exp (- (expt (/ (- h-bar-prime 275d0)
                                               25d0)
                                            2)))))
           (r-at-c (* 2 (sqrt (/ (expt c-bar-prime 7)
                                 (+ (expt c-bar-prime 7) #.(expt 25 7))))))
           (s-at-l (1+ (/ (* 0.015d0 (expt (- l-bar-prime 50) 2))
                          (sqrt (+ 20 (expt (- l-bar-prime 50) 2))))))
           (s-at-c (1+ (* c-bar-prime 0.045d0)))
           (s-at-h (1+ (* c-bar-prime t* 0.015d0)))
           (r-at-t (- (* (sin (u:degrees->radians (* 2 delta-theta)))
                         r-at-c))))
      (sqrt (+ (expt (/ delta-l-prime (* +k-at-l+ s-at-l)) 2)
               (expt (/ delta-c-prime (* +k-at-c+ s-at-c)) 2)
               (expt (/ delta-big-h-prime (* +k-at-h+ s-at-h)) 2)
               (* r-at-t
                  (/ delta-c-prime (* +k-at-c+ s-at-c))
                  (/ delta-big-h-prime (* +k-at-h+ s-at-h))))))))
