(in-package #:%mfiano.graphics.image.color)

;;;; Reference: http://www2.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf

(u:define-constant +delta-e-2000/kl+ 1d0)
(u:define-constant +delta-e-2000/kc+ 1d0)
(u:define-constant +delta-e-2000/kh+ 1d0)

(defun %delta-e-2000/delta-h (h1 h2 c1 c2)
  (if (= c1 c2 0d0)
      0d0
      (let ((diff (- h2 h1)))
        (* (sqrt (* c1 c2))
           (sin
            (u:degrees->radians
             (* (cond
                  ((<= (abs diff) 180d0)
                   diff)
                  ((> diff 180d0)
                   (- diff 360d0))
                  (t
                   (+ diff 360d0)))
                0.5d0)))
           2d0))))

(defun %delta-e-2000/h* (h1 h2 c1 c2)
  (let ((diff (abs (- h1 h2)))
        (sum (+ h1 h2)))
    (if (zerop (* c1 c2))
        sum
        (* (cond
             ((<= diff 180)
              sum)
             ((and (> diff 180) (< sum 360))
              (+ sum 360))
             (t
              (- sum 360)))
           0.5d0))))

(defun delta-e-2000 (color1 color2)
  (flet ((ensure-cielab (color)
           (if (eq (model-name color) 'lab)
               color
               (convert-color color (lab 0 0 0))))
         (a (a c)
           (* a (1+ (* 0.5d0 (- 1 (sqrt (/ (expt c 7) (+ (expt c 7) #.(expt 25 7)))))))))
         (h (a b)
           (if (= a b 0) 0d0 (mod (u:radians->degrees (atan b a)) 360)))
         (c (a b)
           (sqrt (+ (expt a 2) (expt b 2)))))
    (declare (inline a h c))
    (let ((channels1 (channels (ensure-cielab color1)))
          (channels2 (channels (ensure-cielab color2))))
      (v3:with-components ((lab1- channels1)
                           (lab2- channels2))
        (let* ((l (expt (- (* (+ lab1-x lab2-x) 0.5d0) 50) 2))
               (c (* (+ (c lab1-y lab1-z) (c lab2-y lab2-z)) 0.5d0))
               (a1 (a lab1-y c))
               (a2 (a lab2-y c))
               (h1 (h a1 lab1-z))
               (h2 (h a2 lab2-z))
               (c1 (c a1 lab1-z))
               (c2 (c a2 lab2-z))
               (delta-l (- lab2-x lab1-x))
               (delta-c (- c2 c1))
               (delta-h (%delta-e-2000/delta-h h1 h2 c1 c2))
               (c* (* (+ c1 c2) 0.5d0))
               (h* (%delta-e-2000/h* h1 h2 c1 c2))
               (t* (+ (- (* 0.17d0 (cos (u:degrees->radians (- h* 30d0)))))
                      (* 0.24d0 (cos (u:degrees->radians (* h* 2))))
                      (* 0.32d0 (cos (u:degrees->radians (+ (* h* 3) 6d0))))
                      (- (* 0.2d0 (cos (u:degrees->radians (- (* h* 4) 63d0)))))
                      1))
               (delta-theta (* (exp (- (expt (/ (- h* 275d0) 25d0) 2))) 30))
               (rc (* (sqrt (/ (expt c* 7) (+ (expt c* 7) #.(expt 25 7)))) 2))
               (sl (1+ (/ (* l 0.015d0) (sqrt (+ l 20)))))
               (sc (1+ (* c* 0.045d0)))
               (sh (1+ (* c* t* 0.015d0)))
               (rt (- (* (sin (u:degrees->radians (* 2 delta-theta))) rc))))
          (sqrt (+ (expt (/ delta-l (* +delta-e-2000/kl+ sl)) 2)
                   (expt (/ delta-c (* +delta-e-2000/kc+ sc)) 2)
                   (expt (/ delta-h (* +delta-e-2000/kh+ sh)) 2)
                   (* rt
                      (/ delta-c (* +delta-e-2000/kc+ sc))
                      (/ delta-h (* +delta-e-2000/kh+ sh))))))))))
