(in-package :box.math.test)

(setf *default-test-function* #'equalp)

(plan 82)

(diag "accessors")
(let ((q (quat:make 1 2 3 4)))
  (is (quat:w q) 1)
  (is (quat:x q) 2)
  (is (quat:y q) 3)
  (is (quat:z q) 4)
  (psetf (quat:w q) 10.0 (quat:x q) 20.0 (quat:y q) 30.0 (quat:z q) 40.0)
  (is (quat:w q) 10)
  (is (quat:x q) 20)
  (is (quat:y q) 30)
  (is (quat:z q) 40))

(diag "identity")
(let ((q (quat:id))
      (r (quat:make 1 0 0 0)))
  (is q r)
  (is quat:+id+ r))

(diag "equality")
(let ((q1 (quat:make 0.25889468 -0.4580922 0.6231675 0.34003425))
      (q2 (quat:make 1e-8 1e-8 1e-8 1e-8)))
  (ok (quat:= q1 q1))
  (ok (quat:~ (quat:+ q1 q2) q1))
  (ok (quat:~ q2 (quat:zero))))

(diag "copy")
(let ((q (quat:make 0.34003425 -0.4920528 0.8754709 0.6535034))
      (o (quat:zero)))
  (is (quat:copy! o q) q)
  (is o q)
  (is (quat:copy q) q)
  (isnt q (quat:copy q) :test #'eq))

(diag "addition")
(let ((q1 (quat:make -0.11586404 -0.47056317 0.23266816 -0.6098385))
      (q2 (quat:make -0.81111765 0.11399269 -0.24647212 -0.812474))
      (r (quat:make -0.9269817 -0.35657048 -0.013803959 -1.4223125))
      (o (quat:zero)))
  (is (quat:+! o q1 q2) r)
  (is o r)
  (is (quat:+ q1 q2) r))

(diag "subtraction")
(let ((q1 (quat:make 0.1688292 0.5137224 0.83796954 -0.9853494))
      (q2 (quat:make -0.3770373 0.19171429 -0.8571534 0.4451759))
      (r (quat:make 0.5458665 0.32200813 1.695123 -1.4305253))
      (o (quat:zero)))
  (is (quat:-! o q1 q2) r)
  (is o r)
  (is (quat:- q1 q2) r))

(diag "multiplication")
(let ((q1 (quat:make 1 2 3 4))
      (q2 (quat:make 10 20 30 40))
      (q3 quat:+id+)
      (r (quat:make -280 40 60 80))
      (rot-x (quat:rotate quat:+id+ (v3:make (/ pi 3) 0 0)))
      (rot-y (quat:rotate quat:+id+ (v3:make 0 (/ pi 4) 0)))
      (rot-xy (quat:rotate quat:+id+ (v3:make (/ pi 3) (/ pi 4) 0)))
      (o (quat:zero)))
  (is (quat:*! o q1 q2) r)
  (is o r)
  (is (quat:* q1 q3) q1)
  (is (quat:* q3 q1) q1)
  (is (quat:* q1 q2) (quat:* q2 q1))
  (is (quat:* rot-x rot-y) rot-xy)
  (isnt (quat:* rot-x rot-y) (quat:* rot-y rot-x)))

(diag "scalar product")
(let ((q (quat:make 0.25889468 -0.4580922 0.6231675 0.34003425))
      (r (quat:make -0.12738985 0.22540556 -0.30663133 -0.1673148))
      (o (quat:zero)))
  (is (quat:scale! o q -0.4920528) r)
  (is o r)
  (is (quat:scale q -0.4920528) r))

(diag "cross product")
(let ((q1 (quat:make 0.8660254 0.5 0 0))
      (q2 (quat:make 0.8660254 0 0.5 0))
      (r (quat:make 0.75 0 0.4330127 0.25))
      (o (quat:zero)))
  (is (quat:cross! o q1 q2) r)
  (is o r)
  (is (quat:cross q1 q2) r))

(diag "conjugate")
(let ((q (quat:make 0.8754709 0.6535034 -0.11586404 -0.47056317))
      (r (quat:make 0.8754709 -0.6535034 0.11586404 0.47056317))
      (o (quat:zero)))
  (is (quat:conjugate! o q) r)
  (is o r)
  (is (quat:conjugate q) r))

(diag "magnitude")
(is (quat:magnitude quat:+id+) 1)
(is (quat:magnitude (quat:make 0.23266816 -0.6098385 -0.81111765 0.11399269)) 1.0473508)

(diag "normalize")
(let ((q (quat:make -0.24647212 -0.812474 0.9715252 0.8300271))
      (r (quat:make -0.16065533 -0.52958643 0.6332591 0.5410279))
      (o (quat:zero)))
  (is (quat:normalize! o q) r)
  (is o r)
  (is (quat:normalize q) r)
  (is (quat:normalize (quat:make 2 0 0 0)) quat:+id+))

(diag "negate")
(let ((q (quat:make 0.9858451 0.85955405 0.8707795 -0.36954784))
      (r (quat:make -0.9858451 -0.85955405 -0.8707795 0.36954784))
      (o (quat:zero)))
  (is (quat:negate! o q) r)
  (is o r)
  (is (quat:negate q) r))

(diag "dot product")
(let ((q1 (quat:make -0.55014205 0.66294193 -0.44094658 0.1688292))
      (q2 (quat:make 0.5137224 0.83796954 -0.9853494 -0.3770373)))
  (is (quat:dot q1 q2) 0.64373636))

(diag "inverse")
(let ((q (quat:make 0.19171429 -0.8571534 0.4451759 0.39651704))
      (r (quat:make 0.17012934 0.76064724 -0.39505392 -0.35187355))
      (o (quat:zero)))
  (is (quat:inverse! o q) r)
  (is o r)
  (is (quat:inverse q) r))

(diag "rotate")
(let ((oqx (quat:id))
      (oqy (quat:id))
      (oqz (quat:id))
      (rqx (quat:make 0.86602545 0.5 0 0))
      (rqy (quat:make 0.86602545 0 0.5 0))
      (rqz (quat:make 0.86602545 0 0 0.5))
      (vx (v3:make (/ pi 3) 0 0))
      (vy (v3:make 0 (/ pi 3) 0))
      (vz (v3:make 0 0 (/ pi 3))))
  (ok (quat:~ (quat:rotate! oqx quat:+id+ vx) rqx))
  (ok (quat:~ (quat:rotate! oqy quat:+id+ vy) rqy))
  (ok (quat:~ (quat:rotate! oqz quat:+id+ vz) rqz))
  (ok (quat:~ oqx rqx))
  (ok (quat:~ oqy rqy))
  (ok (quat:~ oqz rqz))
  (ok (quat:~ (quat:rotate quat:+id+ vx) rqx))
  (ok (quat:~ (quat:rotate quat:+id+ vy) rqy))
  (ok (quat:~ (quat:rotate quat:+id+ vz) rqz)))

(diag "vec3 conversion")
(let* ((q (quat:make 0.3628688 0.9540863 0.017128706 0.32979298))
       (r (v3:make (quat:x q) (quat:y q) (quat:z q)))
       (o (v3:zero)))
  (is (quat:to-vec3! o q) r)
  (is o r)
  (is (quat:to-vec3 q) r))
(let* ((v (v3:make 0.2571392 0.19932675 -0.025900126))
       (r (quat:make 0 (v3:x v) (v3:y v) (v3:z v)))
       (o (quat:zero)))
  (is (quat:from-vec3! o v) r)
  (is o r)
  (is (quat:from-vec3 v) r))

(diag "vec4 conversion")
(let* ((q (quat:make 0.3628688 0.9540863 0.017128706 0.32979298))
       (r (v4:make (quat:w q) (quat:x q) (quat:y q) (quat:z q)))
       (o (v4:zero)))
  (is (quat:to-vec4! o q) r)
  (is o r)
  (is (quat:to-vec4 q) r))
(let* ((v (v4:make 0.2571392 0.19932675 -0.025900126 0.8267517))
       (r (quat:make (v4:x v) (v4:y v) (v4:z v) (v4:w v)))
       (o (quat:zero)))
  (is (quat:from-vec4! o v) r)
  (is o r)
  (is (quat:from-vec4 v) r))

(diag "matrix conversion")
(let ((q (quat:rotate quat:+id+ (v3:make (/ pi 3) 0 0)))
      (qo (quat:zero))
      (r (m4:make 1 0 0 0 0 0.5 -0.86602545 0 0 0.86602545 0.5 0 0 0 0 1))
      (mo (m4:id)))
  (ok (m4:~ (quat:to-mat4! mo q) r))
  (ok (m4:~ mo r))
  (ok (m4:~ (quat:to-mat4 q) r))
  (ok (quat:~ (quat:from-mat4! qo r) q))
  (ok (quat:~ qo q))
  (ok (quat:~ (quat:from-mat4 r) q)))

(diag "spherical linear interpolation")
(let ((q1 (quat:make -0.15230274 0.7359729 -0.27456188 -0.28505945))
      (q2 (quat:make 0.594954 0.030960321 -0.037411213 -0.02747035))
      (r (quat:make -0.5157237 0.4865686 -0.16367096 -0.17777666))
      (o (quat:zero)))
  (is (quat:slerp! o q1 q2 0.5) r)
  (is o r)
  (is (quat:slerp q1 q2 0.5) r))

(finalize)
