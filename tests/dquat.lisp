(in-package :box.math.test)

(setf *default-test-function* #'equalp)

(plan 44)

(diag "identity")
(is (dquat:id) (dquat:make (quat:id) (quat:zero)))

(diag "equality")
(pass "redundant")

(diag "copy")
(pass "redundant")

(diag "addition")
(pass "redundant")

(diag "subtraction")
(pass "redundant")

(diag "multiplication")
(pass "redundant")

(diag "scalar product")
(pass "redundant")

(diag "conjugate")
(pass "redundant")

(diag "magnitude")
(pass "redundant")

(diag "normalize")
(let ((d (dquat:make (quat:make -0.6114731 0.9762738 0.2938311 0.28761292)
                  (quat:make -0.22068572 -0.499269 0.2683978 0.05499983)))
      (r (dquat:make (quat:make -0.4999214 0.79817116 0.2402272 0.2351434)
                  (quat:make -0.1804258 -0.40818685 0.21943371 0.044966154)))
      (o (dquat:id)))
  (is (dquat:normalize! o d) r)
  (is o r)
  (is (dquat:normalize d) r)
  (is (dquat:normalize (dquat:make (quat:make 2 0 0 0) (quat:zero))) (dquat:id)))

(diag "negate")
(pass "redundant")

(diag "dot product")
(pass "redundant")

(diag "inverse")
(let ((d (dquat:make (quat:make 0.80088806 0.9623561 -0.86221576 -0.34557796)
                  (quat:make 0.7549772 -0.49641347 0.5262337 -0.15916371)))
      (r (dquat:make (quat:make 0.32953054 -0.39596757 0.3547642 0.14219026)
                  (quat:make 0.38434494 0.115688086 -0.13717361 0.09729204)))
      (o (dquat:id)))
  (is (dquat:inverse! o d) r)
  (is o r)
  (is (dquat:inverse d) r))

(diag "translation conversion")
(let ((d (dquat:make (quat:make 0.8660254 0.5 0 0)
                  (quat:make -2.0669873 4.580127 16.160254 7.9903812)))
      (rd (dquat:make (quat:make 1 0 0 0)
                   (quat:make 0.0 5.0 10.0 15.0)))
      (od (dquat:id))
      (rv (v3:make 10 20 30))
      (ov (v3:zero)))
  (ok (v3:~ (dquat:translation-to-vec3! ov d) rv :tolerance 1e-5))
  (ok (v3:~ ov rv :tolerance 1e-5))
  (ok (v3:~ (dquat:translation-to-vec3 d) rv :tolerance 1e-5))
  (is (dquat:translation-from-vec3! od rv) rd)
  (is od rd)
  (is (dquat:translation-from-vec3 rv) rd))

(diag "rotation conversion")
(pass "redundant")

(diag "rotation")
(pass "redundant")

(diag "matrix conversion")
(let ((d (dquat:make (quat:make 0.8660254 0.5 0 0)
                  (quat:make -2.0669873 4.580127 16.160254 7.9903812)))
      (r (m4:make 1 0 0 10 0 0.5 -0.8660254 20 0 0.8660254 0.5 30 0 0 0 1))
      (o (m4:id)))
  (ok (m4:~ (dquat:to-mat4! o d) r :tolerance 1e-5))
  (ok (m4:~ o r :tolerance 1e-5))
  (ok (m4:~ (dquat:to-mat4 d) r :tolerance 1e-5)))

(diag "screw parameter conversion")
(let ((d (dquat:make (quat:make 0.8660254 0.5 0 0)
                  (quat:make -2.0669873 4.580127 16.160254 7.9903812)))
      (r (dquat:make (quat:make 0.8660254 0.5 0 0)
                  (quat:make -2.4999998 4.330127 16.160254 7.9903817))))
  (multiple-value-bind (angle pitch dir moment) (dquat:to-screw d)
    (ok (< (abs (- angle 1.0471976)) 1e-5))
    (ok (< (abs (- pitch 10)) 1e-5))
    (ok (v3:~ dir (v3:make 1 0 0) :tolerance 1e-5))
    (ok (v3:~ moment (v3:make 0 32.320507 15.980763) :tolerance 1e-5))
    (ok (dquat:~ (dquat:from-screw angle pitch dir moment) r :tolerance 1e-5))))

(diag "screw spherical linear interpolation")
(let ((d1 (dquat:make (quat:make 0.8660254 0.5 0 0)
                      (quat:make -2.0669873 4.580127 16.160254 7.9903812)))
      (d2 (dquat:make (quat:make 0.9238795 0.38268346 0 0)
                      (quat:make -3.3648949 9.430137 21.511862 12.737339)))
      (r (dquat:make (quat:make 0.89687264 0.44228896 0 0)
                     (quat:make -2.868731 6.947688 18.876476 10.386089)))
      (o (dquat:id)))
  (is (dquat:sclerp! o d1 d2 0.5) r)
  (is o r)
  (is (dquat:sclerp d1 d2 0.5) r)
  (is (dquat:sclerp d1 d2 0.0) d1)
  (ok (dquat:~ (dquat:sclerp d1 d2 1.0) d2 :tolerance 1e-4)))

(diag "normalized linear interpolation")
(let ((d1 (dquat:make (quat:make 0.8660254 0.5 0 0)
                      (quat:make -2.0669873 4.580127 16.160254 7.9903812)))
      (d2 (dquat:make (quat:make 0.9238795 0.38268346 0 0)
                      (quat:make -3.3648949 9.430137 21.511862 12.737339)))
      (r (dquat:make (quat:make 0.8949524 0.44134173 0 0)
                     (quat:make -2.715941 7.0051317 18.836058 10.36386)))
      (o (dquat:id)))
  (is (dquat:nlerp! o d1 d2 0.5) r)
  (is o r)
  (is (dquat:nlerp d1 d2 0.5) r)
  (is (dquat:nlerp d1 d2 0.0) d1)
  (is (dquat:nlerp d1 d2 1.0) d2))

(finalize)
