(in-package :gamebox-math.test)

(setf *default-test-function* #'equalp)

(plan 102)

(diag "structure")
(is-type +qid+ '(simple-array single-float (4)))
(is-type (quat) '(simple-array single-float (4)))

(diag "accessors")
(is (qref (quat) 0) 0)
(is (qref (quat) 1) 0)
(is (qref (quat) 2) 0)
(is (qref (quat) 3) 0)
(let ((q (quat)))
  (psetf (qref q 0) 10.0 (qref q 1) 20.0 (qref q 2) 30.0 (qref q 3) 40.0)
  (is (qref q 0) 10)
  (is (qref q 1) 20)
  (is (qref q 2) 30)
  (is (qref q 3) 40))
(with-quat (q (quat 1 2 3 4))
  (is qw 1)
  (is qx 2)
  (is qy 3)
  (is qz 4)
  (psetf qw 10.0 qx 20.0 qy 30.0 qz 40.0)
  (is qw 10)
  (is qx 20)
  (is qy 30)
  (is qz 40))
(with-quats ((q1 (quat 1 2 3 4)) (q2 (quat 5 6 7 8)))
  (is q1w 1)
  (is q1x 2)
  (is q1y 3)
  (is q1z 4)
  (is q2w 5)
  (is q2x 6)
  (is q2y 7)
  (is q2z 8)
  (psetf q1w 10.0 q1x 20.0 q1y 30.0 q1z 40.0 q2w 50.0 q2x 60.0 q2y 70.0 q2z 80.0)
  (is q1w 10)
  (is q1x 20)
  (is q1y 30)
  (is q1z 40)
  (is q2w 50)
  (is q2x 60)
  (is q2y 70)
  (is q2z 80))

(diag "identity")
(with-quats ((q (qid)) (r (quat 1 0 0 0)))
  (is q r)
  (is +qid+ r))

(diag "equality")
(with-quats ((q1 (quat 0.25889468 -0.4580922 0.6231675 0.34003425))
             (q2 (quat 1e-8 1e-8 1e-8 1e-8)))
  (ok (q= q1 q1))
  (ok (q~ (q+ q1 q2) q1))
  (ok (q~ q2 (quat))))

(diag "copy")
(with-quats ((q (quat 0.34003425 -0.4920528 0.8754709 0.6535034)) (o (quat)))
  (is (qcp! o q) q)
  (is o q)
  (is (qcp q) q)
  (isnt q (qcp q) :test #'eq))

(diag "addition")
(with-quats ((q1 (quat -0.11586404 -0.47056317 0.23266816 -0.6098385))
             (q2 (quat -0.81111765 0.11399269 -0.24647212 -0.812474))
             (r (quat -0.9269817 -0.35657048 -0.013803959 -1.4223125))
             (o (quat)))
  (is (q+! o q1 q2) r)
  (is o r)
  (is (q+ q1 q2) r))

(diag "subtraction")
(with-quats ((q1 (quat 0.1688292 0.5137224 0.83796954 -0.9853494))
             (q2 (quat -0.3770373 0.19171429 -0.8571534 0.4451759))
             (r (quat 0.5458665 0.32200813 1.695123 -1.4305253))
             (o (quat)))
  (is (q-! o q1 q2) r)
  (is o r)
  (is (q- q1 q2) r))

(diag "multiplication")
(with-quats ((qa (quat 1 2 3 4))
             (qb (quat 10 20 30 40))
             (qc +qid+)
             (r (quat -280 40 60 80))
             (rot-x (qrot +qid+ (vec (/ pi 3) 0 0)))
             (rot-y (qrot +qid+ (vec 0 (/ pi 4) 0)))
             (rot-xy (qrot +qid+ (vec (/ pi 3) (/ pi 4) 0)))
             (o (quat)))
  (is (q*! o qa qb) r)
  (is o r)
  (is (q* qa qc) qa)
  (is (q* qc qa) qa)
  (is (q* qa qb) (q* qb qa))
  (is (q* rot-x rot-y) rot-xy)
  (isnt (q* rot-x rot-y) (q* rot-y rot-x)))

(diag "scalar product")
(with-quats ((q (quat 0.25889468 -0.4580922 0.6231675 0.34003425))
             (r (quat -0.12738985 0.22540556 -0.30663133 -0.1673148))
             (o (quat)))
  (is (qscale! o q -0.4920528) r)
  (is o r)
  (is (qscale q -0.4920528) r))

(diag "cross product")
(with-quats ((q1 (quat 0.8660254 0.5 0 0))
             (q2 (quat 0.8660254 0 0.5 0))
             (r (quat 0.75 0 0.4330127 0.25))
             (o (quat)))
  (is (qcross! o q1 q2) r)
  (is o r)
  (is (qcross q1 q2) r))

(diag "conjugate")
(with-quats ((q (quat 0.8754709 0.6535034 -0.11586404 -0.47056317))
             (r (quat 0.8754709 -0.6535034 0.11586404 0.47056317))
             (o (quat)))
  (is (qconj! o q) r)
  (is o r)
  (is (qconj q) r))

(diag "magnitude")
(is (qmag +qid+) 1)
(is (qmag (quat 0.23266816 -0.6098385 -0.81111765 0.11399269)) 1.0473508)

(diag "normalize")
(with-quats ((q (quat -0.24647212 -0.812474 0.9715252 0.8300271))
             (r (quat -0.16065533 -0.52958643 0.6332591 0.5410279))
             (o (quat)))
  (is (qnormalize! o q) r)
  (is o r)
  (is (qnormalize q) r)
  (is (qnormalize (quat 2 0 0 0)) +qid+))

(diag "negate")
(with-quats ((q (quat 0.9858451 0.85955405 0.8707795 -0.36954784))
             (r (quat -0.9858451 -0.85955405 -0.8707795 0.36954784))
             (o (quat)))
  (is (qneg! o q) r)
  (is o r)
  (is (qneg q) r))

(diag "dot product")
(with-quats ((q1 (quat -0.55014205 0.66294193 -0.44094658 0.1688292))
             (q2 (quat 0.5137224 0.83796954 -0.9853494 -0.3770373)))
  (is (qdot q1 q2) 0.64373636))

(diag "inverse")
(with-quats ((q (quat 0.19171429 -0.8571534 0.4451759 0.39651704))
             (r (quat 0.17012934 0.76064724 -0.39505392 -0.35187355))
             (o (quat)))
  (is (qinv! o q) r)
  (is o r)
  (is (qinv q) r))

(diag "rotate")
(with-quats ((oqx (qid))
             (oqy (qid))
             (oqz (qid))
             (rqx (quat 0.86602545 0.5 0 0))
             (rqy (quat 0.86602545 0 0.5 0))
             (rqz (quat 0.86602545 0 0 0.5)))
  (with-vectors ((vx (vec (/ pi 3) 0 0))
                 (vy (vec 0 (/ pi 3) 0))
                 (vz (vec 0 0 (/ pi 3))))
    (ok (q~ (qrot! oqx +qid+ vx) rqx))
    (ok (q~ (qrot! oqy +qid+ vy) rqy))
    (ok (q~ (qrot! oqz +qid+ vz) rqz))
    (ok (q~ oqx rqx))
    (ok (q~ oqy rqy))
    (ok (q~ oqz rqz))
    (ok (q~ (qrot +qid+ vx) rqx))
    (ok (q~ (qrot +qid+ vy) rqy))
    (ok (q~ (qrot +qid+ vz) rqz))))

(diag "vector conversion")
(with-quat (q (quat 0.3628688 0.9540863 0.017128706 0.32979298))
  (with-vectors ((r (vec qx qy qz))
                 (o (vec)))
    (is (q->v! o q) r)
    (is o r)
    (is (q->v q) r)))
(with-vector (v (vec 0.2571392 0.19932675 -0.025900126))
  (with-quats ((r (quat 0 vx vy vz))
               (o (quat)))
    (is (v->q! o v) r)
    (is o r)
    (is (v->q v) r)))

(diag "matrix conversion")
(with-quats ((q (qrot +qid+ (vec (/ pi 3))))
             (qo (quat)))
  (with-matrices ((r (matrix 1 0 0 0 0 0.5 -0.86602545 0 0 0.86602545 0.5 0 0 0
                             0 1))
                  (mo (mid)))
    (ok (m~ (q->m! mo q) r))
    (ok (m~ mo r))
    (ok (m~ (q->m q) r))
    (ok (q~ (m->q! qo r) q))
    (ok (q~ qo q))
    (ok (q~ (m->q r) q))))

(diag "spherical linear interpolation")
(with-quats ((q1 (quat -0.15230274 0.7359729 -0.27456188 -0.28505945))
             (q2 (quat 0.594954 0.030960321 -0.037411213 -0.02747035))
             (r (quat -0.5157237 0.4865686 -0.16367096 -0.17777666))
             (o (quat)))
  (is (qslerp! o q1 q2 0.5) r)
  (is o r)
  (is (qslerp q1 q2 0.5) r))

(finalize)
